# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ibcsp_ipamsvc.api_client import ApiClient


class GlobalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def global_read(self, id_application_name, id_resource_type, **kwargs):  # noqa: E501
        """Read the Global configuration object.  # noqa: E501

        Use this method to read the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_read(id_application_name, id_resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str id_resource_type: An application specific type name of a resource (required)
        :param str fields:   A collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.  Specify this parameter as a comma-separated list of JSON tag names.        
        :return: IpamsvcReadGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.global_read_with_http_info(id_application_name, id_resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.global_read_with_http_info(id_application_name, id_resource_type, **kwargs)  # noqa: E501
            return data

    def global_read_with_http_info(self, id_application_name, id_resource_type, **kwargs):  # noqa: E501
        """Read the Global configuration object.  # noqa: E501

        Use this method to read the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_read_with_http_info(id_application_name, id_resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str id_resource_type: An application specific type name of a resource (required)
        :param str fields:   A collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.  Specify this parameter as a comma-separated list of JSON tag names.        
        :return: IpamsvcReadGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_application_name', 'id_resource_type', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method global_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_application_name' is set
        if ('id_application_name' not in params or
                params['id_application_name'] is None):
            raise ValueError("Missing the required parameter `id_application_name` when calling `global_read`")  # noqa: E501
        # verify the required parameter 'id_resource_type' is set
        if ('id_resource_type' not in params or
                params['id_resource_type'] is None):
            raise ValueError("Missing the required parameter `id_resource_type` when calling `global_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_application_name' in params:
            path_params['id.application_name'] = params['id_application_name']  # noqa: E501
        if 'id_resource_type' in params:
            path_params['id.resource_type'] = params['id_resource_type']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('_fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dhcp/global', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpamsvcReadGlobalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def global_read2(self, id_application_name, id_resource_type, id, **kwargs):  # noqa: E501
        """Read the Global configuration object.  # noqa: E501

        Use this method to read the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_read2(id_application_name, id_resource_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str id_resource_type: An application specific type name of a resource (required)
        :param str id: An application specific resource identity of a resource (required)
        :param str fields:   A collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.  Specify this parameter as a comma-separated list of JSON tag names.        
        :return: IpamsvcReadGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.global_read2_with_http_info(id_application_name, id_resource_type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.global_read2_with_http_info(id_application_name, id_resource_type, id, **kwargs)  # noqa: E501
            return data

    def global_read2_with_http_info(self, id_application_name, id_resource_type, id, **kwargs):  # noqa: E501
        """Read the Global configuration object.  # noqa: E501

        Use this method to read the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_read2_with_http_info(id_application_name, id_resource_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str id_resource_type: An application specific type name of a resource (required)
        :param str id: An application specific resource identity of a resource (required)
        :param str fields:   A collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.  Specify this parameter as a comma-separated list of JSON tag names.        
        :return: IpamsvcReadGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_application_name', 'id_resource_type', 'id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method global_read2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_application_name' is set
        if ('id_application_name' not in params or
                params['id_application_name'] is None):
            raise ValueError("Missing the required parameter `id_application_name` when calling `global_read2`")  # noqa: E501
        # verify the required parameter 'id_resource_type' is set
        if ('id_resource_type' not in params or
                params['id_resource_type'] is None):
            raise ValueError("Missing the required parameter `id_resource_type` when calling `global_read2`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `global_read2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_application_name' in params:
            path_params['id.application_name'] = params['id_application_name']  # noqa: E501
        if 'id_resource_type' in params:
            path_params['id.resource_type'] = params['id_resource_type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('_fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dhcp/global/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpamsvcReadGlobalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def global_update(self, payload_id_application_name, payload_id_resource_type, body, **kwargs):  # noqa: E501
        """Update the Global configuration object.  # noqa: E501

        Use this method to update the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_update(payload_id_application_name, payload_id_resource_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payload_id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str payload_id_resource_type: An application specific type name of a resource (required)
        :param IpamsvcGlobal body: (required)
        :return: IpamsvcUpdateGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.global_update_with_http_info(payload_id_application_name, payload_id_resource_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.global_update_with_http_info(payload_id_application_name, payload_id_resource_type, body, **kwargs)  # noqa: E501
            return data

    def global_update_with_http_info(self, payload_id_application_name, payload_id_resource_type, body, **kwargs):  # noqa: E501
        """Update the Global configuration object.  # noqa: E501

        Use this method to update the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_update_with_http_info(payload_id_application_name, payload_id_resource_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payload_id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str payload_id_resource_type: An application specific type name of a resource (required)
        :param IpamsvcGlobal body: (required)
        :return: IpamsvcUpdateGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload_id_application_name', 'payload_id_resource_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method global_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payload_id_application_name' is set
        if ('payload_id_application_name' not in params or
                params['payload_id_application_name'] is None):
            raise ValueError("Missing the required parameter `payload_id_application_name` when calling `global_update`")  # noqa: E501
        # verify the required parameter 'payload_id_resource_type' is set
        if ('payload_id_resource_type' not in params or
                params['payload_id_resource_type'] is None):
            raise ValueError("Missing the required parameter `payload_id_resource_type` when calling `global_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `global_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payload_id_application_name' in params:
            path_params['payload.id.application_name'] = params['payload_id_application_name']  # noqa: E501
        if 'payload_id_resource_type' in params:
            path_params['payload.id.resource_type'] = params['payload_id_resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dhcp/global', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpamsvcUpdateGlobalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def global_update2(self, payload_id_application_name, payload_id_resource_type, id, body, **kwargs):  # noqa: E501
        """Update the Global configuration object.  # noqa: E501

        Use this method to update the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_update2(payload_id_application_name, payload_id_resource_type, id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payload_id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str payload_id_resource_type: An application specific type name of a resource (required)
        :param str id: An application specific resource identity of a resource (required)
        :param IpamsvcGlobal body: (required)
        :return: IpamsvcUpdateGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.global_update2_with_http_info(payload_id_application_name, payload_id_resource_type, id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.global_update2_with_http_info(payload_id_application_name, payload_id_resource_type, id, body, **kwargs)  # noqa: E501
            return data

    def global_update2_with_http_info(self, payload_id_application_name, payload_id_resource_type, id, body, **kwargs):  # noqa: E501
        """Update the Global configuration object.  # noqa: E501

        Use this method to update the Global configuration object. Service operates on Global singleton object that represents parent configuration settings for inheritance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_update2_with_http_info(payload_id_application_name, payload_id_resource_type, id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payload_id_application_name: An application identifier that will be used among other infrastructure services to identify the application (required)
        :param str payload_id_resource_type: An application specific type name of a resource (required)
        :param str id: An application specific resource identity of a resource (required)
        :param IpamsvcGlobal body: (required)
        :return: IpamsvcUpdateGlobalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload_id_application_name', 'payload_id_resource_type', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method global_update2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payload_id_application_name' is set
        if ('payload_id_application_name' not in params or
                params['payload_id_application_name'] is None):
            raise ValueError("Missing the required parameter `payload_id_application_name` when calling `global_update2`")  # noqa: E501
        # verify the required parameter 'payload_id_resource_type' is set
        if ('payload_id_resource_type' not in params or
                params['payload_id_resource_type'] is None):
            raise ValueError("Missing the required parameter `payload_id_resource_type` when calling `global_update2`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `global_update2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `global_update2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payload_id_application_name' in params:
            path_params['payload.id.application_name'] = params['payload_id_application_name']  # noqa: E501
        if 'payload_id_resource_type' in params:
            path_params['payload.id.resource_type'] = params['payload_id_resource_type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dhcp/global/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpamsvcUpdateGlobalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
