# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcOptionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group': 'str',
        'option_code': 'str',
        'option_value': 'str',
        'type': 'str'
    }

    attribute_map = {
        'group': 'group',
        'option_code': 'option_code',
        'option_value': 'option_value',
        'type': 'type'
    }

    def __init__(self, group=None, option_code=None, option_value=None, type=None):  # noqa: E501
        """IpamsvcOptionItem - a model defined in Swagger"""  # noqa: E501

        self._group = None
        self._option_code = None
        self._option_value = None
        self._type = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if option_code is not None:
            self.option_code = option_code
        if option_value is not None:
            self.option_value = option_value
        if type is not None:
            self.type = type

    @property
    def group(self):
        """Gets the group of this IpamsvcOptionItem.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The group of this IpamsvcOptionItem.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this IpamsvcOptionItem.

        The resource identifier.  # noqa: E501

        :param group: The group of this IpamsvcOptionItem.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def option_code(self):
        """Gets the option_code of this IpamsvcOptionItem.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The option_code of this IpamsvcOptionItem.  # noqa: E501
        :rtype: str
        """
        return self._option_code

    @option_code.setter
    def option_code(self, option_code):
        """Sets the option_code of this IpamsvcOptionItem.

        The resource identifier.  # noqa: E501

        :param option_code: The option_code of this IpamsvcOptionItem.  # noqa: E501
        :type: str
        """

        self._option_code = option_code

    @property
    def option_value(self):
        """Gets the option_value of this IpamsvcOptionItem.  # noqa: E501

        Option value.  # noqa: E501

        :return: The option_value of this IpamsvcOptionItem.  # noqa: E501
        :rtype: str
        """
        return self._option_value

    @option_value.setter
    def option_value(self, option_value):
        """Sets the option_value of this IpamsvcOptionItem.

        Option value.  # noqa: E501

        :param option_value: The option_value of this IpamsvcOptionItem.  # noqa: E501
        :type: str
        """

        self._option_value = option_value

    @property
    def type(self):
        """Gets the type of this IpamsvcOptionItem.  # noqa: E501

        Type of Item. It can be \"group\" or \"option\".  # noqa: E501

        :return: The type of this IpamsvcOptionItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IpamsvcOptionItem.

        Type of Item. It can be \"group\" or \"option\".  # noqa: E501

        :param type: The type of this IpamsvcOptionItem.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcOptionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcOptionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
