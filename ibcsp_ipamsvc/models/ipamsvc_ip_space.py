# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcIPSpace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asm_config': 'IpamsvcASMConfig',
        'asm_scope_flag': 'int',
        'comment': 'str',
        'dhcp_config': 'IpamsvcDHCPConfig',
        'dhcp_options': 'list[IpamsvcOptionItem]',
        'id': 'str',
        'inheritance_sources': 'IpamsvcDHCPInheritance',
        'name': 'str',
        'tags': 'TypesJSONValue',
        'threshold': 'IpamsvcUtilizationThreshold',
        'utilization': 'IpamsvcUtilization'
    }

    attribute_map = {
        'asm_config': 'asm_config',
        'asm_scope_flag': 'asm_scope_flag',
        'comment': 'comment',
        'dhcp_config': 'dhcp_config',
        'dhcp_options': 'dhcp_options',
        'id': 'id',
        'inheritance_sources': 'inheritance_sources',
        'name': 'name',
        'tags': 'tags',
        'threshold': 'threshold',
        'utilization': 'utilization'
    }

    def __init__(self, asm_config=None, asm_scope_flag=None, comment=None, dhcp_config=None, dhcp_options=None, id=None, inheritance_sources=None, name=None, tags=None, threshold=None, utilization=None):  # noqa: E501
        """IpamsvcIPSpace - a model defined in Swagger"""  # noqa: E501

        self._asm_config = None
        self._asm_scope_flag = None
        self._comment = None
        self._dhcp_config = None
        self._dhcp_options = None
        self._id = None
        self._inheritance_sources = None
        self._name = None
        self._tags = None
        self._threshold = None
        self._utilization = None
        self.discriminator = None

        if asm_config is not None:
            self.asm_config = asm_config
        if asm_scope_flag is not None:
            self.asm_scope_flag = asm_scope_flag
        if comment is not None:
            self.comment = comment
        if dhcp_config is not None:
            self.dhcp_config = dhcp_config
        if dhcp_options is not None:
            self.dhcp_options = dhcp_options
        if id is not None:
            self.id = id
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        self.name = name
        if tags is not None:
            self.tags = tags
        if threshold is not None:
            self.threshold = threshold
        if utilization is not None:
            self.utilization = utilization

    @property
    def asm_config(self):
        """Gets the asm_config of this IpamsvcIPSpace.  # noqa: E501


        :return: The asm_config of this IpamsvcIPSpace.  # noqa: E501
        :rtype: IpamsvcASMConfig
        """
        return self._asm_config

    @asm_config.setter
    def asm_config(self, asm_config):
        """Sets the asm_config of this IpamsvcIPSpace.


        :param asm_config: The asm_config of this IpamsvcIPSpace.  # noqa: E501
        :type: IpamsvcASMConfig
        """

        self._asm_config = asm_config

    @property
    def asm_scope_flag(self):
        """Gets the asm_scope_flag of this IpamsvcIPSpace.  # noqa: E501


        :return: The asm_scope_flag of this IpamsvcIPSpace.  # noqa: E501
        :rtype: int
        """
        return self._asm_scope_flag

    @asm_scope_flag.setter
    def asm_scope_flag(self, asm_scope_flag):
        """Sets the asm_scope_flag of this IpamsvcIPSpace.


        :param asm_scope_flag: The asm_scope_flag of this IpamsvcIPSpace.  # noqa: E501
        :type: int
        """

        self._asm_scope_flag = asm_scope_flag

    @property
    def comment(self):
        """Gets the comment of this IpamsvcIPSpace.  # noqa: E501

        A comment of the IP Space object.  # noqa: E501

        :return: The comment of this IpamsvcIPSpace.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcIPSpace.

        A comment of the IP Space object.  # noqa: E501

        :param comment: The comment of this IpamsvcIPSpace.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dhcp_config(self):
        """Gets the dhcp_config of this IpamsvcIPSpace.  # noqa: E501

        A shared DHCP configuration that controls how leases are issued.  # noqa: E501

        :return: The dhcp_config of this IpamsvcIPSpace.  # noqa: E501
        :rtype: IpamsvcDHCPConfig
        """
        return self._dhcp_config

    @dhcp_config.setter
    def dhcp_config(self, dhcp_config):
        """Sets the dhcp_config of this IpamsvcIPSpace.

        A shared DHCP configuration that controls how leases are issued.  # noqa: E501

        :param dhcp_config: The dhcp_config of this IpamsvcIPSpace.  # noqa: E501
        :type: IpamsvcDHCPConfig
        """

        self._dhcp_config = dhcp_config

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this IpamsvcIPSpace.  # noqa: E501

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :return: The dhcp_options of this IpamsvcIPSpace.  # noqa: E501
        :rtype: list[IpamsvcOptionItem]
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this IpamsvcIPSpace.

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :param dhcp_options: The dhcp_options of this IpamsvcIPSpace.  # noqa: E501
        :type: list[IpamsvcOptionItem]
        """

        self._dhcp_options = dhcp_options

    @property
    def id(self):
        """Gets the id of this IpamsvcIPSpace.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcIPSpace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcIPSpace.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcIPSpace.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this IpamsvcIPSpace.  # noqa: E501

        Optional. Inheritance configuration.  # noqa: E501

        :return: The inheritance_sources of this IpamsvcIPSpace.  # noqa: E501
        :rtype: IpamsvcDHCPInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this IpamsvcIPSpace.

        Optional. Inheritance configuration.  # noqa: E501

        :param inheritance_sources: The inheritance_sources of this IpamsvcIPSpace.  # noqa: E501
        :type: IpamsvcDHCPInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def name(self):
        """Gets the name of this IpamsvcIPSpace.  # noqa: E501

        The name of the IP Space object.  # noqa: E501

        :return: The name of this IpamsvcIPSpace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcIPSpace.

        The name of the IP Space object.  # noqa: E501

        :param name: The name of this IpamsvcIPSpace.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this IpamsvcIPSpace.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this IpamsvcIPSpace.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcIPSpace.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this IpamsvcIPSpace.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    @property
    def threshold(self):
        """Gets the threshold of this IpamsvcIPSpace.  # noqa: E501

        The Utilization threshold (low and high) values of the utilization.  # noqa: E501

        :return: The threshold of this IpamsvcIPSpace.  # noqa: E501
        :rtype: IpamsvcUtilizationThreshold
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this IpamsvcIPSpace.

        The Utilization threshold (low and high) values of the utilization.  # noqa: E501

        :param threshold: The threshold of this IpamsvcIPSpace.  # noqa: E501
        :type: IpamsvcUtilizationThreshold
        """

        self._threshold = threshold

    @property
    def utilization(self):
        """Gets the utilization of this IpamsvcIPSpace.  # noqa: E501

        RO Field: The Total Utilization of all the children of this IP Space.  # noqa: E501

        :return: The utilization of this IpamsvcIPSpace.  # noqa: E501
        :rtype: IpamsvcUtilization
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this IpamsvcIPSpace.

        RO Field: The Total Utilization of all the children of this IP Space.  # noqa: E501

        :param utilization: The utilization of this IpamsvcIPSpace.  # noqa: E501
        :type: IpamsvcUtilization
        """

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcIPSpace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcIPSpace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
