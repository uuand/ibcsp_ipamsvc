# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcDNSUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'absolute_name': 'str',
        'address': 'str',
        'comment': 'str',
        'id': 'str',
        'name': 'str',
        'record': 'str',
        'space': 'str',
        'type': 'str',
        'view': 'str',
        'zone': 'str'
    }

    attribute_map = {
        'absolute_name': 'absolute_name',
        'address': 'address',
        'comment': 'comment',
        'id': 'id',
        'name': 'name',
        'record': 'record',
        'space': 'space',
        'type': 'type',
        'view': 'view',
        'zone': 'zone'
    }

    def __init__(self, absolute_name=None, address=None, comment=None, id=None, name=None, record=None, space=None, type=None, view=None, zone=None):  # noqa: E501
        """IpamsvcDNSUsage - a model defined in Swagger"""  # noqa: E501

        self._absolute_name = None
        self._address = None
        self._comment = None
        self._id = None
        self._name = None
        self._record = None
        self._space = None
        self._type = None
        self._view = None
        self._zone = None
        self.discriminator = None

        if absolute_name is not None:
            self.absolute_name = absolute_name
        if address is not None:
            self.address = address
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if record is not None:
            self.record = record
        if space is not None:
            self.space = space
        if type is not None:
            self.type = type
        if view is not None:
            self.view = view
        if zone is not None:
            self.zone = zone

    @property
    def absolute_name(self):
        """Gets the absolute_name of this IpamsvcDNSUsage.  # noqa: E501

        Read-only. The absolute name of the resource record in associated zone.  # noqa: E501

        :return: The absolute_name of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._absolute_name

    @absolute_name.setter
    def absolute_name(self, absolute_name):
        """Sets the absolute_name of this IpamsvcDNSUsage.

        Read-only. The absolute name of the resource record in associated zone.  # noqa: E501

        :param absolute_name: The absolute_name of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._absolute_name = absolute_name

    @property
    def address(self):
        """Gets the address of this IpamsvcDNSUsage.  # noqa: E501

        Read-only. The address of the referenced record.  # noqa: E501

        :return: The address of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IpamsvcDNSUsage.

        Read-only. The address of the referenced record.  # noqa: E501

        :param address: The address of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def comment(self):
        """Gets the comment of this IpamsvcDNSUsage.  # noqa: E501

        Read-only. The comment of the referenced record.  # noqa: E501

        :return: The comment of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcDNSUsage.

        Read-only. The comment of the referenced record.  # noqa: E501

        :param comment: The comment of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this IpamsvcDNSUsage.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcDNSUsage.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IpamsvcDNSUsage.  # noqa: E501

        Read-only. The name in zone of the referenced record.  # noqa: E501

        :return: The name of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcDNSUsage.

        Read-only. The name in zone of the referenced record.  # noqa: E501

        :param name: The name of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def record(self):
        """Gets the record of this IpamsvcDNSUsage.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The record of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this IpamsvcDNSUsage.

        The resource identifier.  # noqa: E501

        :param record: The record of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._record = record

    @property
    def space(self):
        """Gets the space of this IpamsvcDNSUsage.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The space of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this IpamsvcDNSUsage.

        The resource identifier.  # noqa: E501

        :param space: The space of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._space = space

    @property
    def type(self):
        """Gets the type of this IpamsvcDNSUsage.  # noqa: E501

        Read-only. The type of the referenced record.  # noqa: E501

        :return: The type of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IpamsvcDNSUsage.

        Read-only. The type of the referenced record.  # noqa: E501

        :param type: The type of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def view(self):
        """Gets the view of this IpamsvcDNSUsage.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The view of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this IpamsvcDNSUsage.

        The resource identifier.  # noqa: E501

        :param view: The view of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def zone(self):
        """Gets the zone of this IpamsvcDNSUsage.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The zone of this IpamsvcDNSUsage.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this IpamsvcDNSUsage.

        The resource identifier.  # noqa: E501

        :param zone: The zone of this IpamsvcDNSUsage.  # noqa: E501
        :type: str
        """

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcDNSUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcDNSUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
