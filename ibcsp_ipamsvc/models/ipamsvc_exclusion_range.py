# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcExclusionRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'end': 'str',
        'start': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'end': 'end',
        'start': 'start'
    }

    def __init__(self, comment=None, end=None, start=None):  # noqa: E501
        """IpamsvcExclusionRange - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._end = None
        self._start = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        self.end = end
        self.start = start

    @property
    def comment(self):
        """Gets the comment of this IpamsvcExclusionRange.  # noqa: E501

        A comment of the exclusion range object.  # noqa: E501

        :return: The comment of this IpamsvcExclusionRange.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcExclusionRange.

        A comment of the exclusion range object.  # noqa: E501

        :param comment: The comment of this IpamsvcExclusionRange.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def end(self):
        """Gets the end of this IpamsvcExclusionRange.  # noqa: E501

        End address of the exclusion range object.  # noqa: E501

        :return: The end of this IpamsvcExclusionRange.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this IpamsvcExclusionRange.

        End address of the exclusion range object.  # noqa: E501

        :param end: The end of this IpamsvcExclusionRange.  # noqa: E501
        :type: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def start(self):
        """Gets the start of this IpamsvcExclusionRange.  # noqa: E501

        Start address of the exclusion range object.  # noqa: E501

        :return: The start of this IpamsvcExclusionRange.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this IpamsvcExclusionRange.

        Start address of the exclusion range object.  # noqa: E501

        :param start: The start of this IpamsvcExclusionRange.  # noqa: E501
        :type: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcExclusionRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcExclusionRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
