# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcDHCPInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_hostname': 'str',
        'client_hwaddr': 'str',
        'client_id': 'str',
        'end': 'datetime',
        'fingerprint': 'str',
        'remain': 'int',
        'start': 'datetime',
        'state': 'str',
        'state_ts': 'datetime'
    }

    attribute_map = {
        'client_hostname': 'client_hostname',
        'client_hwaddr': 'client_hwaddr',
        'client_id': 'client_id',
        'end': 'end',
        'fingerprint': 'fingerprint',
        'remain': 'remain',
        'start': 'start',
        'state': 'state',
        'state_ts': 'state_ts'
    }

    def __init__(self, client_hostname=None, client_hwaddr=None, client_id=None, end=None, fingerprint=None, remain=None, start=None, state=None, state_ts=None):  # noqa: E501
        """IpamsvcDHCPInfo - a model defined in Swagger"""  # noqa: E501

        self._client_hostname = None
        self._client_hwaddr = None
        self._client_id = None
        self._end = None
        self._fingerprint = None
        self._remain = None
        self._start = None
        self._state = None
        self._state_ts = None
        self.discriminator = None

        if client_hostname is not None:
            self.client_hostname = client_hostname
        if client_hwaddr is not None:
            self.client_hwaddr = client_hwaddr
        if client_id is not None:
            self.client_id = client_id
        if end is not None:
            self.end = end
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if remain is not None:
            self.remain = remain
        if start is not None:
            self.start = start
        if state is not None:
            self.state = state
        if state_ts is not None:
            self.state_ts = state_ts

    @property
    def client_hostname(self):
        """Gets the client_hostname of this IpamsvcDHCPInfo.  # noqa: E501

        RO field: A DHCP host name associated with this client.  # noqa: E501

        :return: The client_hostname of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: str
        """
        return self._client_hostname

    @client_hostname.setter
    def client_hostname(self, client_hostname):
        """Sets the client_hostname of this IpamsvcDHCPInfo.

        RO field: A DHCP host name associated with this client.  # noqa: E501

        :param client_hostname: The client_hostname of this IpamsvcDHCPInfo.  # noqa: E501
        :type: str
        """

        self._client_hostname = client_hostname

    @property
    def client_hwaddr(self):
        """Gets the client_hwaddr of this IpamsvcDHCPInfo.  # noqa: E501

        RO field: A Hardware Address associated with this client.  # noqa: E501

        :return: The client_hwaddr of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: str
        """
        return self._client_hwaddr

    @client_hwaddr.setter
    def client_hwaddr(self, client_hwaddr):
        """Sets the client_hwaddr of this IpamsvcDHCPInfo.

        RO field: A Hardware Address associated with this client.  # noqa: E501

        :param client_hwaddr: The client_hwaddr of this IpamsvcDHCPInfo.  # noqa: E501
        :type: str
        """

        self._client_hwaddr = client_hwaddr

    @property
    def client_id(self):
        """Gets the client_id of this IpamsvcDHCPInfo.  # noqa: E501

        RO field: ID associated with this client.  # noqa: E501

        :return: The client_id of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IpamsvcDHCPInfo.

        RO field: ID associated with this client.  # noqa: E501

        :param client_id: The client_id of this IpamsvcDHCPInfo.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def end(self):
        """Gets the end of this IpamsvcDHCPInfo.  # noqa: E501

        RO field: The time at which the state, when set to leased, will changed to free.  # noqa: E501

        :return: The end of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this IpamsvcDHCPInfo.

        RO field: The time at which the state, when set to leased, will changed to free.  # noqa: E501

        :param end: The end of this IpamsvcDHCPInfo.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def fingerprint(self):
        """Gets the fingerprint of this IpamsvcDHCPInfo.  # noqa: E501


        :return: The fingerprint of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this IpamsvcDHCPInfo.


        :param fingerprint: The fingerprint of this IpamsvcDHCPInfo.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def remain(self):
        """Gets the remain of this IpamsvcDHCPInfo.  # noqa: E501

        RO field: The remaining time, in seconds, until which the state, when set to leased, will remain in that state.  # noqa: E501

        :return: The remain of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: int
        """
        return self._remain

    @remain.setter
    def remain(self, remain):
        """Sets the remain of this IpamsvcDHCPInfo.

        RO field: The remaining time, in seconds, until which the state, when set to leased, will remain in that state.  # noqa: E501

        :param remain: The remain of this IpamsvcDHCPInfo.  # noqa: E501
        :type: int
        """

        self._remain = remain

    @property
    def start(self):
        """Gets the start of this IpamsvcDHCPInfo.  # noqa: E501


        :return: The start of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this IpamsvcDHCPInfo.


        :param start: The start of this IpamsvcDHCPInfo.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def state(self):
        """Gets the state of this IpamsvcDHCPInfo.  # noqa: E501

        RO Field: Indicates the status of this IP address from a DHCP protocol standpoint as: -   none: Address is not under DHCP control -   free: Address is under DHCP control but has no lease currently assigned. -   leased: Address is under DHCP control and has a lease currently assigned. The lease details are contained in the matching dhcp/lease resource.  # noqa: E501

        :return: The state of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IpamsvcDHCPInfo.

        RO Field: Indicates the status of this IP address from a DHCP protocol standpoint as: -   none: Address is not under DHCP control -   free: Address is under DHCP control but has no lease currently assigned. -   leased: Address is under DHCP control and has a lease currently assigned. The lease details are contained in the matching dhcp/lease resource.  # noqa: E501

        :param state: The state of this IpamsvcDHCPInfo.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def state_ts(self):
        """Gets the state_ts of this IpamsvcDHCPInfo.  # noqa: E501

        RO field: The time at which the state was last reported.  # noqa: E501

        :return: The state_ts of this IpamsvcDHCPInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._state_ts

    @state_ts.setter
    def state_ts(self, state_ts):
        """Sets the state_ts of this IpamsvcDHCPInfo.

        RO field: The time at which the state was last reported.  # noqa: E501

        :param state_ts: The state_ts of this IpamsvcDHCPInfo.  # noqa: E501
        :type: datetime
        """

        self._state_ts = state_ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcDHCPInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcDHCPInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
