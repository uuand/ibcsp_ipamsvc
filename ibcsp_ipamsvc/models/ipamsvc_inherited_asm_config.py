# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcInheritedASMConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asm_enable_block': 'IpamsvcInheritedAsmEnableBlock',
        'asm_growth_block': 'IpamsvcInheritedAsmGrowthBlock',
        'asm_threshold': 'InheritanceInheritedUInt32',
        'forecast_period': 'InheritanceInheritedUInt32',
        'history': 'InheritanceInheritedUInt32',
        'min_total': 'InheritanceInheritedUInt32',
        'min_unused': 'InheritanceInheritedUInt32'
    }

    attribute_map = {
        'asm_enable_block': 'asm_enable_block',
        'asm_growth_block': 'asm_growth_block',
        'asm_threshold': 'asm_threshold',
        'forecast_period': 'forecast_period',
        'history': 'history',
        'min_total': 'min_total',
        'min_unused': 'min_unused'
    }

    def __init__(self, asm_enable_block=None, asm_growth_block=None, asm_threshold=None, forecast_period=None, history=None, min_total=None, min_unused=None):  # noqa: E501
        """IpamsvcInheritedASMConfig - a model defined in Swagger"""  # noqa: E501

        self._asm_enable_block = None
        self._asm_growth_block = None
        self._asm_threshold = None
        self._forecast_period = None
        self._history = None
        self._min_total = None
        self._min_unused = None
        self.discriminator = None

        if asm_enable_block is not None:
            self.asm_enable_block = asm_enable_block
        if asm_growth_block is not None:
            self.asm_growth_block = asm_growth_block
        if asm_threshold is not None:
            self.asm_threshold = asm_threshold
        if forecast_period is not None:
            self.forecast_period = forecast_period
        if history is not None:
            self.history = history
        if min_total is not None:
            self.min_total = min_total
        if min_unused is not None:
            self.min_unused = min_unused

    @property
    def asm_enable_block(self):
        """Gets the asm_enable_block of this IpamsvcInheritedASMConfig.  # noqa: E501


        :return: The asm_enable_block of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: IpamsvcInheritedAsmEnableBlock
        """
        return self._asm_enable_block

    @asm_enable_block.setter
    def asm_enable_block(self, asm_enable_block):
        """Sets the asm_enable_block of this IpamsvcInheritedASMConfig.


        :param asm_enable_block: The asm_enable_block of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: IpamsvcInheritedAsmEnableBlock
        """

        self._asm_enable_block = asm_enable_block

    @property
    def asm_growth_block(self):
        """Gets the asm_growth_block of this IpamsvcInheritedASMConfig.  # noqa: E501


        :return: The asm_growth_block of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: IpamsvcInheritedAsmGrowthBlock
        """
        return self._asm_growth_block

    @asm_growth_block.setter
    def asm_growth_block(self, asm_growth_block):
        """Sets the asm_growth_block of this IpamsvcInheritedASMConfig.


        :param asm_growth_block: The asm_growth_block of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: IpamsvcInheritedAsmGrowthBlock
        """

        self._asm_growth_block = asm_growth_block

    @property
    def asm_threshold(self):
        """Gets the asm_threshold of this IpamsvcInheritedASMConfig.  # noqa: E501


        :return: The asm_threshold of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: InheritanceInheritedUInt32
        """
        return self._asm_threshold

    @asm_threshold.setter
    def asm_threshold(self, asm_threshold):
        """Sets the asm_threshold of this IpamsvcInheritedASMConfig.


        :param asm_threshold: The asm_threshold of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: InheritanceInheritedUInt32
        """

        self._asm_threshold = asm_threshold

    @property
    def forecast_period(self):
        """Gets the forecast_period of this IpamsvcInheritedASMConfig.  # noqa: E501


        :return: The forecast_period of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: InheritanceInheritedUInt32
        """
        return self._forecast_period

    @forecast_period.setter
    def forecast_period(self, forecast_period):
        """Sets the forecast_period of this IpamsvcInheritedASMConfig.


        :param forecast_period: The forecast_period of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: InheritanceInheritedUInt32
        """

        self._forecast_period = forecast_period

    @property
    def history(self):
        """Gets the history of this IpamsvcInheritedASMConfig.  # noqa: E501

        The minimum amount of history needed before ASM can run on this subnet.  # noqa: E501

        :return: The history of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: InheritanceInheritedUInt32
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this IpamsvcInheritedASMConfig.

        The minimum amount of history needed before ASM can run on this subnet.  # noqa: E501

        :param history: The history of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: InheritanceInheritedUInt32
        """

        self._history = history

    @property
    def min_total(self):
        """Gets the min_total of this IpamsvcInheritedASMConfig.  # noqa: E501

        Minimum size of range needed for ASM to run on this subnet.  # noqa: E501

        :return: The min_total of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: InheritanceInheritedUInt32
        """
        return self._min_total

    @min_total.setter
    def min_total(self, min_total):
        """Sets the min_total of this IpamsvcInheritedASMConfig.

        Minimum size of range needed for ASM to run on this subnet.  # noqa: E501

        :param min_total: The min_total of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: InheritanceInheritedUInt32
        """

        self._min_total = min_total

    @property
    def min_unused(self):
        """Gets the min_unused of this IpamsvcInheritedASMConfig.  # noqa: E501

        The minimum number of addresses that must be available outside of the DHCP ranges and fixed addresses when making a suggested change. This value is a percentage.  # noqa: E501

        :return: The min_unused of this IpamsvcInheritedASMConfig.  # noqa: E501
        :rtype: InheritanceInheritedUInt32
        """
        return self._min_unused

    @min_unused.setter
    def min_unused(self, min_unused):
        """Sets the min_unused of this IpamsvcInheritedASMConfig.

        The minimum number of addresses that must be available outside of the DHCP ranges and fixed addresses when making a suggested change. This value is a percentage.  # noqa: E501

        :param min_unused: The min_unused of this IpamsvcInheritedASMConfig.  # noqa: E501
        :type: InheritanceInheritedUInt32
        """

        self._min_unused = min_unused

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcInheritedASMConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcInheritedASMConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
