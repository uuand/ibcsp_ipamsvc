# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcDDNSBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ddns_domain': 'str',
        'ddns_enabled': 'bool',
        'ddns_zones': 'list[IpamsvcDDNSZone]'
    }

    attribute_map = {
        'ddns_domain': 'ddns_domain',
        'ddns_enabled': 'ddns_enabled',
        'ddns_zones': 'ddns_zones'
    }

    def __init__(self, ddns_domain=None, ddns_enabled=None, ddns_zones=None):  # noqa: E501
        """IpamsvcDDNSBlock - a model defined in Swagger"""  # noqa: E501

        self._ddns_domain = None
        self._ddns_enabled = None
        self._ddns_zones = None
        self.discriminator = None

        if ddns_domain is not None:
            self.ddns_domain = ddns_domain
        if ddns_enabled is not None:
            self.ddns_enabled = ddns_enabled
        if ddns_zones is not None:
            self.ddns_zones = ddns_zones

    @property
    def ddns_domain(self):
        """Gets the ddns_domain of this IpamsvcDDNSBlock.  # noqa: E501

        Optional. Field config for ddns_domain field.  # noqa: E501

        :return: The ddns_domain of this IpamsvcDDNSBlock.  # noqa: E501
        :rtype: str
        """
        return self._ddns_domain

    @ddns_domain.setter
    def ddns_domain(self, ddns_domain):
        """Sets the ddns_domain of this IpamsvcDDNSBlock.

        Optional. Field config for ddns_domain field.  # noqa: E501

        :param ddns_domain: The ddns_domain of this IpamsvcDDNSBlock.  # noqa: E501
        :type: str
        """

        self._ddns_domain = ddns_domain

    @property
    def ddns_enabled(self):
        """Gets the ddns_enabled of this IpamsvcDDNSBlock.  # noqa: E501

        Optional. Field config for ddns_enabled field.  # noqa: E501

        :return: The ddns_enabled of this IpamsvcDDNSBlock.  # noqa: E501
        :rtype: bool
        """
        return self._ddns_enabled

    @ddns_enabled.setter
    def ddns_enabled(self, ddns_enabled):
        """Sets the ddns_enabled of this IpamsvcDDNSBlock.

        Optional. Field config for ddns_enabled field.  # noqa: E501

        :param ddns_enabled: The ddns_enabled of this IpamsvcDDNSBlock.  # noqa: E501
        :type: bool
        """

        self._ddns_enabled = ddns_enabled

    @property
    def ddns_zones(self):
        """Gets the ddns_zones of this IpamsvcDDNSBlock.  # noqa: E501

        Optional. Field config for ddns_zones field.  # noqa: E501

        :return: The ddns_zones of this IpamsvcDDNSBlock.  # noqa: E501
        :rtype: list[IpamsvcDDNSZone]
        """
        return self._ddns_zones

    @ddns_zones.setter
    def ddns_zones(self, ddns_zones):
        """Sets the ddns_zones of this IpamsvcDDNSBlock.

        Optional. Field config for ddns_zones field.  # noqa: E501

        :param ddns_zones: The ddns_zones of this IpamsvcDDNSBlock.  # noqa: E501
        :type: list[IpamsvcDDNSZone]
        """

        self._ddns_zones = ddns_zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcDDNSBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcDDNSBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
