# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'comment': 'str',
        'dhcp_info': 'IpamsvcDHCPInfo',
        'host': 'str',
        'hwaddr': 'str',
        'id': 'str',
        'interface': 'str',
        'names': 'list[IpamsvcName]',
        'parent': 'str',
        'protocol': 'str',
        'range': 'str',
        'space': 'str',
        'state': 'str',
        'tags': 'TypesJSONValue',
        'usage': 'list[str]'
    }

    attribute_map = {
        'address': 'address',
        'comment': 'comment',
        'dhcp_info': 'dhcp_info',
        'host': 'host',
        'hwaddr': 'hwaddr',
        'id': 'id',
        'interface': 'interface',
        'names': 'names',
        'parent': 'parent',
        'protocol': 'protocol',
        'range': 'range',
        'space': 'space',
        'state': 'state',
        'tags': 'tags',
        'usage': 'usage'
    }

    def __init__(self, address=None, comment=None, dhcp_info=None, host=None, hwaddr=None, id=None, interface=None, names=None, parent=None, protocol=None, range=None, space=None, state=None, tags=None, usage=None):  # noqa: E501
        """IpamsvcAddress - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._comment = None
        self._dhcp_info = None
        self._host = None
        self._hwaddr = None
        self._id = None
        self._interface = None
        self._names = None
        self._parent = None
        self._protocol = None
        self._range = None
        self._space = None
        self._state = None
        self._tags = None
        self._usage = None
        self.discriminator = None

        self.address = address
        if comment is not None:
            self.comment = comment
        if dhcp_info is not None:
            self.dhcp_info = dhcp_info
        if host is not None:
            self.host = host
        if hwaddr is not None:
            self.hwaddr = hwaddr
        if id is not None:
            self.id = id
        if interface is not None:
            self.interface = interface
        if names is not None:
            self.names = names
        if parent is not None:
            self.parent = parent
        if protocol is not None:
            self.protocol = protocol
        if range is not None:
            self.range = range
        self.space = space
        if state is not None:
            self.state = state
        if tags is not None:
            self.tags = tags
        if usage is not None:
            self.usage = usage

    @property
    def address(self):
        """Gets the address of this IpamsvcAddress.  # noqa: E501

        The address in form \"a.b.c.d\".  # noqa: E501

        :return: The address of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IpamsvcAddress.

        The address in form \"a.b.c.d\".  # noqa: E501

        :param address: The address of this IpamsvcAddress.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def comment(self):
        """Gets the comment of this IpamsvcAddress.  # noqa: E501

        A comment of the address object.  # noqa: E501

        :return: The comment of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcAddress.

        A comment of the address object.  # noqa: E501

        :param comment: The comment of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dhcp_info(self):
        """Gets the dhcp_info of this IpamsvcAddress.  # noqa: E501

        RO field: DHCP information associated with this object.  # noqa: E501

        :return: The dhcp_info of this IpamsvcAddress.  # noqa: E501
        :rtype: IpamsvcDHCPInfo
        """
        return self._dhcp_info

    @dhcp_info.setter
    def dhcp_info(self, dhcp_info):
        """Sets the dhcp_info of this IpamsvcAddress.

        RO field: DHCP information associated with this object.  # noqa: E501

        :param dhcp_info: The dhcp_info of this IpamsvcAddress.  # noqa: E501
        :type: IpamsvcDHCPInfo
        """

        self._dhcp_info = dhcp_info

    @property
    def host(self):
        """Gets the host of this IpamsvcAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The host of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this IpamsvcAddress.

        The resource identifier.  # noqa: E501

        :param host: The host of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def hwaddr(self):
        """Gets the hwaddr of this IpamsvcAddress.  # noqa: E501

        A Hardware Address associated with this IP address.  # noqa: E501

        :return: The hwaddr of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._hwaddr

    @hwaddr.setter
    def hwaddr(self, hwaddr):
        """Sets the hwaddr of this IpamsvcAddress.

        A Hardware Address associated with this IP address.  # noqa: E501

        :param hwaddr: The hwaddr of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._hwaddr = hwaddr

    @property
    def id(self):
        """Gets the id of this IpamsvcAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcAddress.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this IpamsvcAddress.  # noqa: E501

        Name of the network interface card (NIC) associated with the address, if any.  # noqa: E501

        :return: The interface of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this IpamsvcAddress.

        Name of the network interface card (NIC) associated with the address, if any.  # noqa: E501

        :param interface: The interface of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def names(self):
        """Gets the names of this IpamsvcAddress.  # noqa: E501

        List of all names associated with this address.  # noqa: E501

        :return: The names of this IpamsvcAddress.  # noqa: E501
        :rtype: list[IpamsvcName]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this IpamsvcAddress.

        List of all names associated with this address.  # noqa: E501

        :param names: The names of this IpamsvcAddress.  # noqa: E501
        :type: list[IpamsvcName]
        """

        self._names = names

    @property
    def parent(self):
        """Gets the parent of this IpamsvcAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The parent of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this IpamsvcAddress.

        The resource identifier.  # noqa: E501

        :param parent: The parent of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def protocol(self):
        """Gets the protocol of this IpamsvcAddress.  # noqa: E501

        RO field: The type of protocol (ipv4 or ipv6).  # noqa: E501

        :return: The protocol of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IpamsvcAddress.

        RO field: The type of protocol (ipv4 or ipv6).  # noqa: E501

        :param protocol: The protocol of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def range(self):
        """Gets the range of this IpamsvcAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The range of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this IpamsvcAddress.

        The resource identifier.  # noqa: E501

        :param range: The range of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def space(self):
        """Gets the space of this IpamsvcAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The space of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this IpamsvcAddress.

        The resource identifier.  # noqa: E501

        :param space: The space of this IpamsvcAddress.  # noqa: E501
        :type: str
        """
        if space is None:
            raise ValueError("Invalid value for `space`, must not be `None`")  # noqa: E501

        self._space = space

    @property
    def state(self):
        """Gets the state of this IpamsvcAddress.  # noqa: E501

        RO field: Indicates if address is used or free.  # noqa: E501

        :return: The state of this IpamsvcAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IpamsvcAddress.

        RO field: Indicates if address is used or free.  # noqa: E501

        :param state: The state of this IpamsvcAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this IpamsvcAddress.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this IpamsvcAddress.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcAddress.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this IpamsvcAddress.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    @property
    def usage(self):
        """Gets the usage of this IpamsvcAddress.  # noqa: E501


        :return: The usage of this IpamsvcAddress.  # noqa: E501
        :rtype: list[str]
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this IpamsvcAddress.


        :param usage: The usage of this IpamsvcAddress.  # noqa: E501
        :type: list[str]
        """

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
