# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'ddns_client_update': 'str',
        'ddns_domain': 'str',
        'ddns_enabled': 'bool',
        'ddns_generate_name': 'bool',
        'ddns_zones': 'list[IpamsvcDDNSZone]',
        'dhcp_config': 'IpamsvcDHCPConfig',
        'dhcp_options': 'list[IpamsvcOptionItem]',
        'hostname_rewrite_char': 'str',
        'hostname_rewrite_enabled': 'bool',
        'hostname_rewrite_regex': 'str',
        'id': 'str',
        'inheritance_sources': 'IpamsvcServerInheritance',
        'name': 'str',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        'comment': 'comment',
        'ddns_client_update': 'ddns_client_update',
        'ddns_domain': 'ddns_domain',
        'ddns_enabled': 'ddns_enabled',
        'ddns_generate_name': 'ddns_generate_name',
        'ddns_zones': 'ddns_zones',
        'dhcp_config': 'dhcp_config',
        'dhcp_options': 'dhcp_options',
        'hostname_rewrite_char': 'hostname_rewrite_char',
        'hostname_rewrite_enabled': 'hostname_rewrite_enabled',
        'hostname_rewrite_regex': 'hostname_rewrite_regex',
        'id': 'id',
        'inheritance_sources': 'inheritance_sources',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, comment=None, ddns_client_update=None, ddns_domain=None, ddns_enabled=None, ddns_generate_name=None, ddns_zones=None, dhcp_config=None, dhcp_options=None, hostname_rewrite_char=None, hostname_rewrite_enabled=None, hostname_rewrite_regex=None, id=None, inheritance_sources=None, name=None, tags=None):  # noqa: E501
        """IpamsvcServer - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._ddns_client_update = None
        self._ddns_domain = None
        self._ddns_enabled = None
        self._ddns_generate_name = None
        self._ddns_zones = None
        self._dhcp_config = None
        self._dhcp_options = None
        self._hostname_rewrite_char = None
        self._hostname_rewrite_enabled = None
        self._hostname_rewrite_regex = None
        self._id = None
        self._inheritance_sources = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if ddns_client_update is not None:
            self.ddns_client_update = ddns_client_update
        if ddns_domain is not None:
            self.ddns_domain = ddns_domain
        if ddns_enabled is not None:
            self.ddns_enabled = ddns_enabled
        if ddns_generate_name is not None:
            self.ddns_generate_name = ddns_generate_name
        if ddns_zones is not None:
            self.ddns_zones = ddns_zones
        if dhcp_config is not None:
            self.dhcp_config = dhcp_config
        if dhcp_options is not None:
            self.dhcp_options = dhcp_options
        if hostname_rewrite_char is not None:
            self.hostname_rewrite_char = hostname_rewrite_char
        if hostname_rewrite_enabled is not None:
            self.hostname_rewrite_enabled = hostname_rewrite_enabled
        if hostname_rewrite_regex is not None:
            self.hostname_rewrite_regex = hostname_rewrite_regex
        if id is not None:
            self.id = id
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def comment(self):
        """Gets the comment of this IpamsvcServer.  # noqa: E501

        Optional. Comment for server configuration.  # noqa: E501

        :return: The comment of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcServer.

        Optional. Comment for server configuration.  # noqa: E501

        :param comment: The comment of this IpamsvcServer.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def ddns_client_update(self):
        """Gets the ddns_client_update of this IpamsvcServer.  # noqa: E501

        Optional. Controls who does the updates.  Allowed values: - 'client', DHCP server updates DNS if requested by client - 'server', DHCP server always updates DNS, unless the client says not to. - 'ignore', DHCP server always updates DNS, even if the client says not to.  Defaults to 'client'.  # noqa: E501

        :return: The ddns_client_update of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._ddns_client_update

    @ddns_client_update.setter
    def ddns_client_update(self, ddns_client_update):
        """Sets the ddns_client_update of this IpamsvcServer.

        Optional. Controls who does the updates.  Allowed values: - 'client', DHCP server updates DNS if requested by client - 'server', DHCP server always updates DNS, unless the client says not to. - 'ignore', DHCP server always updates DNS, even if the client says not to.  Defaults to 'client'.  # noqa: E501

        :param ddns_client_update: The ddns_client_update of this IpamsvcServer.  # noqa: E501
        :type: str
        """

        self._ddns_client_update = ddns_client_update

    @property
    def ddns_domain(self):
        """Gets the ddns_domain of this IpamsvcServer.  # noqa: E501

        Optional. Domain suffix for DDNS updates. FQDN, may be empty.  Error if empty while ddns_enabled is true.  Default to empty.  # noqa: E501

        :return: The ddns_domain of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._ddns_domain

    @ddns_domain.setter
    def ddns_domain(self, ddns_domain):
        """Sets the ddns_domain of this IpamsvcServer.

        Optional. Domain suffix for DDNS updates. FQDN, may be empty.  Error if empty while ddns_enabled is true.  Default to empty.  # noqa: E501

        :param ddns_domain: The ddns_domain of this IpamsvcServer.  # noqa: E501
        :type: str
        """

        self._ddns_domain = ddns_domain

    @property
    def ddns_enabled(self):
        """Gets the ddns_enabled of this IpamsvcServer.  # noqa: E501

        Optional. Enable to perform DNS updates for leases. All other ddns_* configuration is ignored when this flag is unset.  At a minimum, ddns_domain and ddns_zones must be configured to enable DDNS.  Defaults to false.  # noqa: E501

        :return: The ddns_enabled of this IpamsvcServer.  # noqa: E501
        :rtype: bool
        """
        return self._ddns_enabled

    @ddns_enabled.setter
    def ddns_enabled(self, ddns_enabled):
        """Sets the ddns_enabled of this IpamsvcServer.

        Optional. Enable to perform DNS updates for leases. All other ddns_* configuration is ignored when this flag is unset.  At a minimum, ddns_domain and ddns_zones must be configured to enable DDNS.  Defaults to false.  # noqa: E501

        :param ddns_enabled: The ddns_enabled of this IpamsvcServer.  # noqa: E501
        :type: bool
        """

        self._ddns_enabled = ddns_enabled

    @property
    def ddns_generate_name(self):
        """Gets the ddns_generate_name of this IpamsvcServer.  # noqa: E501

        Optional. True to generate a hostname when not supplied by client.  Defaults to false.  # noqa: E501

        :return: The ddns_generate_name of this IpamsvcServer.  # noqa: E501
        :rtype: bool
        """
        return self._ddns_generate_name

    @ddns_generate_name.setter
    def ddns_generate_name(self, ddns_generate_name):
        """Sets the ddns_generate_name of this IpamsvcServer.

        Optional. True to generate a hostname when not supplied by client.  Defaults to false.  # noqa: E501

        :param ddns_generate_name: The ddns_generate_name of this IpamsvcServer.  # noqa: E501
        :type: bool
        """

        self._ddns_generate_name = ddns_generate_name

    @property
    def ddns_zones(self):
        """Gets the ddns_zones of this IpamsvcServer.  # noqa: E501

        Optional. DNS zones that DDNS updates can be sent to. There is no resolver fallback: the target zone must be explicitly configured for the update to be performed.  Updates are sent to the closest enclosing zone.  Error if ddns_enabled is true and the ddns_domain does not have a corresponding entry in ddns_zones.  Error if there are items with duplicate zone in the list.  Defaults to empty list.  # noqa: E501

        :return: The ddns_zones of this IpamsvcServer.  # noqa: E501
        :rtype: list[IpamsvcDDNSZone]
        """
        return self._ddns_zones

    @ddns_zones.setter
    def ddns_zones(self, ddns_zones):
        """Sets the ddns_zones of this IpamsvcServer.

        Optional. DNS zones that DDNS updates can be sent to. There is no resolver fallback: the target zone must be explicitly configured for the update to be performed.  Updates are sent to the closest enclosing zone.  Error if ddns_enabled is true and the ddns_domain does not have a corresponding entry in ddns_zones.  Error if there are items with duplicate zone in the list.  Defaults to empty list.  # noqa: E501

        :param ddns_zones: The ddns_zones of this IpamsvcServer.  # noqa: E501
        :type: list[IpamsvcDDNSZone]
        """

        self._ddns_zones = ddns_zones

    @property
    def dhcp_config(self):
        """Gets the dhcp_config of this IpamsvcServer.  # noqa: E501

        Optional. DHCP lease configuration. Controls how leases are issued.  # noqa: E501

        :return: The dhcp_config of this IpamsvcServer.  # noqa: E501
        :rtype: IpamsvcDHCPConfig
        """
        return self._dhcp_config

    @dhcp_config.setter
    def dhcp_config(self, dhcp_config):
        """Sets the dhcp_config of this IpamsvcServer.

        Optional. DHCP lease configuration. Controls how leases are issued.  # noqa: E501

        :param dhcp_config: The dhcp_config of this IpamsvcServer.  # noqa: E501
        :type: IpamsvcDHCPConfig
        """

        self._dhcp_config = dhcp_config

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this IpamsvcServer.  # noqa: E501

        Optional. List of DHCP options or group of options. An option list is ordered and may include both option groups and specific options. Multiple occurences of the same option or group is not an error. The last occurence of an option in the list will be used.  Error if the graph of referenced groups contains cycles.  Defaults to empty list.  # noqa: E501

        :return: The dhcp_options of this IpamsvcServer.  # noqa: E501
        :rtype: list[IpamsvcOptionItem]
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this IpamsvcServer.

        Optional. List of DHCP options or group of options. An option list is ordered and may include both option groups and specific options. Multiple occurences of the same option or group is not an error. The last occurence of an option in the list will be used.  Error if the graph of referenced groups contains cycles.  Defaults to empty list.  # noqa: E501

        :param dhcp_options: The dhcp_options of this IpamsvcServer.  # noqa: E501
        :type: list[IpamsvcOptionItem]
        """

        self._dhcp_options = dhcp_options

    @property
    def hostname_rewrite_char(self):
        """Gets the hostname_rewrite_char of this IpamsvcServer.  # noqa: E501

        Optional. Character to replace non-matching characters with when hostname rewrite is enabled.  Any single ASCII character.  Defaults to \"_\".  # noqa: E501

        :return: The hostname_rewrite_char of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._hostname_rewrite_char

    @hostname_rewrite_char.setter
    def hostname_rewrite_char(self, hostname_rewrite_char):
        """Sets the hostname_rewrite_char of this IpamsvcServer.

        Optional. Character to replace non-matching characters with when hostname rewrite is enabled.  Any single ASCII character.  Defaults to \"_\".  # noqa: E501

        :param hostname_rewrite_char: The hostname_rewrite_char of this IpamsvcServer.  # noqa: E501
        :type: str
        """

        self._hostname_rewrite_char = hostname_rewrite_char

    @property
    def hostname_rewrite_enabled(self):
        """Gets the hostname_rewrite_enabled of this IpamsvcServer.  # noqa: E501

        Optional. When enabled, client supplied hostnames will be rewritten prior to DDNS update by replacing every character that does not match hostname_rewrite_regex by hostname_rewrite_char.  Defaults to false.  # noqa: E501

        :return: The hostname_rewrite_enabled of this IpamsvcServer.  # noqa: E501
        :rtype: bool
        """
        return self._hostname_rewrite_enabled

    @hostname_rewrite_enabled.setter
    def hostname_rewrite_enabled(self, hostname_rewrite_enabled):
        """Sets the hostname_rewrite_enabled of this IpamsvcServer.

        Optional. When enabled, client supplied hostnames will be rewritten prior to DDNS update by replacing every character that does not match hostname_rewrite_regex by hostname_rewrite_char.  Defaults to false.  # noqa: E501

        :param hostname_rewrite_enabled: The hostname_rewrite_enabled of this IpamsvcServer.  # noqa: E501
        :type: bool
        """

        self._hostname_rewrite_enabled = hostname_rewrite_enabled

    @property
    def hostname_rewrite_regex(self):
        """Gets the hostname_rewrite_regex of this IpamsvcServer.  # noqa: E501

        Optional. Regex bracket expression to match valid characters.  Must begin with \"[\" and end with \"]\" and be a compilable POSIX regex.  Defaults to \"[a-zA-Z0-9_.]\".  # noqa: E501

        :return: The hostname_rewrite_regex of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._hostname_rewrite_regex

    @hostname_rewrite_regex.setter
    def hostname_rewrite_regex(self, hostname_rewrite_regex):
        """Sets the hostname_rewrite_regex of this IpamsvcServer.

        Optional. Regex bracket expression to match valid characters.  Must begin with \"[\" and end with \"]\" and be a compilable POSIX regex.  Defaults to \"[a-zA-Z0-9_.]\".  # noqa: E501

        :param hostname_rewrite_regex: The hostname_rewrite_regex of this IpamsvcServer.  # noqa: E501
        :type: str
        """

        self._hostname_rewrite_regex = hostname_rewrite_regex

    @property
    def id(self):
        """Gets the id of this IpamsvcServer.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcServer.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this IpamsvcServer.  # noqa: E501

        Optional. Inheritance configuration.  # noqa: E501

        :return: The inheritance_sources of this IpamsvcServer.  # noqa: E501
        :rtype: IpamsvcServerInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this IpamsvcServer.

        Optional. Inheritance configuration.  # noqa: E501

        :param inheritance_sources: The inheritance_sources of this IpamsvcServer.  # noqa: E501
        :type: IpamsvcServerInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def name(self):
        """Gets the name of this IpamsvcServer.  # noqa: E501

        Required. Name of configuration.  # noqa: E501

        :return: The name of this IpamsvcServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcServer.

        Required. Name of configuration.  # noqa: E501

        :param name: The name of this IpamsvcServer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this IpamsvcServer.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this IpamsvcServer.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcServer.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this IpamsvcServer.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
