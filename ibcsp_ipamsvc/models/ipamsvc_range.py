# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'dhcp_host': 'str',
        'dhcp_options': 'list[IpamsvcOptionItem]',
        'end': 'str',
        'exclusion_ranges': 'list[IpamsvcExclusionRange]',
        'id': 'str',
        'inheritance_assigned_hosts': 'list[InheritanceAssignedHost]',
        'inheritance_parent': 'str',
        'inheritance_sources': 'IpamsvcDHCPOptionsInheritance',
        'name': 'str',
        'parent': 'str',
        'protocol': 'str',
        'space': 'str',
        'start': 'str',
        'tags': 'TypesJSONValue',
        'threshold': 'IpamsvcUtilizationThreshold',
        'utilization': 'IpamsvcUtilization'
    }

    attribute_map = {
        'comment': 'comment',
        'dhcp_host': 'dhcp_host',
        'dhcp_options': 'dhcp_options',
        'end': 'end',
        'exclusion_ranges': 'exclusion_ranges',
        'id': 'id',
        'inheritance_assigned_hosts': 'inheritance_assigned_hosts',
        'inheritance_parent': 'inheritance_parent',
        'inheritance_sources': 'inheritance_sources',
        'name': 'name',
        'parent': 'parent',
        'protocol': 'protocol',
        'space': 'space',
        'start': 'start',
        'tags': 'tags',
        'threshold': 'threshold',
        'utilization': 'utilization'
    }

    def __init__(self, comment=None, dhcp_host=None, dhcp_options=None, end=None, exclusion_ranges=None, id=None, inheritance_assigned_hosts=None, inheritance_parent=None, inheritance_sources=None, name=None, parent=None, protocol=None, space=None, start=None, tags=None, threshold=None, utilization=None):  # noqa: E501
        """IpamsvcRange - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._dhcp_host = None
        self._dhcp_options = None
        self._end = None
        self._exclusion_ranges = None
        self._id = None
        self._inheritance_assigned_hosts = None
        self._inheritance_parent = None
        self._inheritance_sources = None
        self._name = None
        self._parent = None
        self._protocol = None
        self._space = None
        self._start = None
        self._tags = None
        self._threshold = None
        self._utilization = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if dhcp_host is not None:
            self.dhcp_host = dhcp_host
        if dhcp_options is not None:
            self.dhcp_options = dhcp_options
        self.end = end
        if exclusion_ranges is not None:
            self.exclusion_ranges = exclusion_ranges
        if id is not None:
            self.id = id
        if inheritance_assigned_hosts is not None:
            self.inheritance_assigned_hosts = inheritance_assigned_hosts
        if inheritance_parent is not None:
            self.inheritance_parent = inheritance_parent
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        if name is not None:
            self.name = name
        if parent is not None:
            self.parent = parent
        if protocol is not None:
            self.protocol = protocol
        self.space = space
        self.start = start
        if tags is not None:
            self.tags = tags
        if threshold is not None:
            self.threshold = threshold
        if utilization is not None:
            self.utilization = utilization

    @property
    def comment(self):
        """Gets the comment of this IpamsvcRange.  # noqa: E501

        A comment of the Range object.  # noqa: E501

        :return: The comment of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcRange.

        A comment of the Range object.  # noqa: E501

        :param comment: The comment of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dhcp_host(self):
        """Gets the dhcp_host of this IpamsvcRange.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The dhcp_host of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_host

    @dhcp_host.setter
    def dhcp_host(self, dhcp_host):
        """Sets the dhcp_host of this IpamsvcRange.

        The resource identifier.  # noqa: E501

        :param dhcp_host: The dhcp_host of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._dhcp_host = dhcp_host

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this IpamsvcRange.  # noqa: E501

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :return: The dhcp_options of this IpamsvcRange.  # noqa: E501
        :rtype: list[IpamsvcOptionItem]
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this IpamsvcRange.

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :param dhcp_options: The dhcp_options of this IpamsvcRange.  # noqa: E501
        :type: list[IpamsvcOptionItem]
        """

        self._dhcp_options = dhcp_options

    @property
    def end(self):
        """Gets the end of this IpamsvcRange.  # noqa: E501

        The end IP Address of the range.  # noqa: E501

        :return: The end of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this IpamsvcRange.

        The end IP Address of the range.  # noqa: E501

        :param end: The end of this IpamsvcRange.  # noqa: E501
        :type: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def exclusion_ranges(self):
        """Gets the exclusion_ranges of this IpamsvcRange.  # noqa: E501

        List of all exclusion ranges, applicable only to ranges.  # noqa: E501

        :return: The exclusion_ranges of this IpamsvcRange.  # noqa: E501
        :rtype: list[IpamsvcExclusionRange]
        """
        return self._exclusion_ranges

    @exclusion_ranges.setter
    def exclusion_ranges(self, exclusion_ranges):
        """Sets the exclusion_ranges of this IpamsvcRange.

        List of all exclusion ranges, applicable only to ranges.  # noqa: E501

        :param exclusion_ranges: The exclusion_ranges of this IpamsvcRange.  # noqa: E501
        :type: list[IpamsvcExclusionRange]
        """

        self._exclusion_ranges = exclusion_ranges

    @property
    def id(self):
        """Gets the id of this IpamsvcRange.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcRange.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_assigned_hosts(self):
        """Gets the inheritance_assigned_hosts of this IpamsvcRange.  # noqa: E501

        Read-only. The list of the inheritance assigned hosts of the object.  # noqa: E501

        :return: The inheritance_assigned_hosts of this IpamsvcRange.  # noqa: E501
        :rtype: list[InheritanceAssignedHost]
        """
        return self._inheritance_assigned_hosts

    @inheritance_assigned_hosts.setter
    def inheritance_assigned_hosts(self, inheritance_assigned_hosts):
        """Sets the inheritance_assigned_hosts of this IpamsvcRange.

        Read-only. The list of the inheritance assigned hosts of the object.  # noqa: E501

        :param inheritance_assigned_hosts: The inheritance_assigned_hosts of this IpamsvcRange.  # noqa: E501
        :type: list[InheritanceAssignedHost]
        """

        self._inheritance_assigned_hosts = inheritance_assigned_hosts

    @property
    def inheritance_parent(self):
        """Gets the inheritance_parent of this IpamsvcRange.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The inheritance_parent of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._inheritance_parent

    @inheritance_parent.setter
    def inheritance_parent(self, inheritance_parent):
        """Sets the inheritance_parent of this IpamsvcRange.

        The resource identifier.  # noqa: E501

        :param inheritance_parent: The inheritance_parent of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._inheritance_parent = inheritance_parent

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this IpamsvcRange.  # noqa: E501

        Optional. Inheritance configuration.  # noqa: E501

        :return: The inheritance_sources of this IpamsvcRange.  # noqa: E501
        :rtype: IpamsvcDHCPOptionsInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this IpamsvcRange.

        Optional. Inheritance configuration.  # noqa: E501

        :param inheritance_sources: The inheritance_sources of this IpamsvcRange.  # noqa: E501
        :type: IpamsvcDHCPOptionsInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def name(self):
        """Gets the name of this IpamsvcRange.  # noqa: E501

        The name of the Range object.  # noqa: E501

        :return: The name of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcRange.

        The name of the Range object.  # noqa: E501

        :param name: The name of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this IpamsvcRange.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The parent of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this IpamsvcRange.

        The resource identifier.  # noqa: E501

        :param parent: The parent of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def protocol(self):
        """Gets the protocol of this IpamsvcRange.  # noqa: E501

        RO Field: The type of protocol (ipv4 or ipv6).  # noqa: E501

        :return: The protocol of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IpamsvcRange.

        RO Field: The type of protocol (ipv4 or ipv6).  # noqa: E501

        :param protocol: The protocol of this IpamsvcRange.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def space(self):
        """Gets the space of this IpamsvcRange.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The space of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this IpamsvcRange.

        The resource identifier.  # noqa: E501

        :param space: The space of this IpamsvcRange.  # noqa: E501
        :type: str
        """
        if space is None:
            raise ValueError("Invalid value for `space`, must not be `None`")  # noqa: E501

        self._space = space

    @property
    def start(self):
        """Gets the start of this IpamsvcRange.  # noqa: E501

        The start IP Address of the range.  # noqa: E501

        :return: The start of this IpamsvcRange.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this IpamsvcRange.

        The start IP Address of the range.  # noqa: E501

        :param start: The start of this IpamsvcRange.  # noqa: E501
        :type: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def tags(self):
        """Gets the tags of this IpamsvcRange.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this IpamsvcRange.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcRange.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this IpamsvcRange.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    @property
    def threshold(self):
        """Gets the threshold of this IpamsvcRange.  # noqa: E501

        The Utilization threshold (low and high) values of the utilization.  # noqa: E501

        :return: The threshold of this IpamsvcRange.  # noqa: E501
        :rtype: IpamsvcUtilizationThreshold
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this IpamsvcRange.

        The Utilization threshold (low and high) values of the utilization.  # noqa: E501

        :param threshold: The threshold of this IpamsvcRange.  # noqa: E501
        :type: IpamsvcUtilizationThreshold
        """

        self._threshold = threshold

    @property
    def utilization(self):
        """Gets the utilization of this IpamsvcRange.  # noqa: E501

        RO Field: The Utilization of this Range.  # noqa: E501

        :return: The utilization of this IpamsvcRange.  # noqa: E501
        :rtype: IpamsvcUtilization
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this IpamsvcRange.

        RO Field: The Utilization of this Range.  # noqa: E501

        :param utilization: The utilization of this IpamsvcRange.  # noqa: E501
        :type: IpamsvcUtilization
        """

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
