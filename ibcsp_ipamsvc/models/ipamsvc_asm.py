# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcASM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'back_end': 'str',
        'back_start': 'str',
        'both_end': 'str',
        'both_start': 'str',
        'front_end': 'str',
        'front_start': 'str',
        'growth': 'int',
        'id': 'str',
        'lookahead': 'int',
        'range_end': 'str',
        'range_id': 'str',
        'range_start': 'str',
        'subnet_address': 'str',
        'subnet_cidr': 'int',
        'subnet_direction': 'str',
        'subnet_id': 'str',
        'subnet_range': 'str',
        'subnet_range_end': 'str',
        'subnet_range_start': 'str',
        'suppress': 'str',
        'suppress_time': 'int',
        'threshold_utilization': 'int',
        'update': 'str',
        'utilization': 'int'
    }

    attribute_map = {
        'back_end': 'back_end',
        'back_start': 'back_start',
        'both_end': 'both_end',
        'both_start': 'both_start',
        'front_end': 'front_end',
        'front_start': 'front_start',
        'growth': 'growth',
        'id': 'id',
        'lookahead': 'lookahead',
        'range_end': 'range_end',
        'range_id': 'range_id',
        'range_start': 'range_start',
        'subnet_address': 'subnet_address',
        'subnet_cidr': 'subnet_cidr',
        'subnet_direction': 'subnet_direction',
        'subnet_id': 'subnet_id',
        'subnet_range': 'subnet_range',
        'subnet_range_end': 'subnet_range_end',
        'subnet_range_start': 'subnet_range_start',
        'suppress': 'suppress',
        'suppress_time': 'suppress_time',
        'threshold_utilization': 'threshold_utilization',
        'update': 'update',
        'utilization': 'utilization'
    }

    def __init__(self, back_end=None, back_start=None, both_end=None, both_start=None, front_end=None, front_start=None, growth=None, id=None, lookahead=None, range_end=None, range_id=None, range_start=None, subnet_address=None, subnet_cidr=None, subnet_direction=None, subnet_id=None, subnet_range=None, subnet_range_end=None, subnet_range_start=None, suppress=None, suppress_time=None, threshold_utilization=None, update=None, utilization=None):  # noqa: E501
        """IpamsvcASM - a model defined in Swagger"""  # noqa: E501

        self._back_end = None
        self._back_start = None
        self._both_end = None
        self._both_start = None
        self._front_end = None
        self._front_start = None
        self._growth = None
        self._id = None
        self._lookahead = None
        self._range_end = None
        self._range_id = None
        self._range_start = None
        self._subnet_address = None
        self._subnet_cidr = None
        self._subnet_direction = None
        self._subnet_id = None
        self._subnet_range = None
        self._subnet_range_end = None
        self._subnet_range_start = None
        self._suppress = None
        self._suppress_time = None
        self._threshold_utilization = None
        self._update = None
        self._utilization = None
        self.discriminator = None

        if back_end is not None:
            self.back_end = back_end
        if back_start is not None:
            self.back_start = back_start
        if both_end is not None:
            self.both_end = both_end
        if both_start is not None:
            self.both_start = both_start
        if front_end is not None:
            self.front_end = front_end
        if front_start is not None:
            self.front_start = front_start
        if growth is not None:
            self.growth = growth
        if id is not None:
            self.id = id
        if lookahead is not None:
            self.lookahead = lookahead
        if range_end is not None:
            self.range_end = range_end
        if range_id is not None:
            self.range_id = range_id
        if range_start is not None:
            self.range_start = range_start
        if subnet_address is not None:
            self.subnet_address = subnet_address
        if subnet_cidr is not None:
            self.subnet_cidr = subnet_cidr
        if subnet_direction is not None:
            self.subnet_direction = subnet_direction
        self.subnet_id = subnet_id
        if subnet_range is not None:
            self.subnet_range = subnet_range
        if subnet_range_end is not None:
            self.subnet_range_end = subnet_range_end
        if subnet_range_start is not None:
            self.subnet_range_start = subnet_range_start
        if suppress is not None:
            self.suppress = suppress
        if suppress_time is not None:
            self.suppress_time = suppress_time
        if threshold_utilization is not None:
            self.threshold_utilization = threshold_utilization
        if update is not None:
            self.update = update
        if utilization is not None:
            self.utilization = utilization

    @property
    def back_end(self):
        """Gets the back_end of this IpamsvcASM.  # noqa: E501


        :return: The back_end of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._back_end

    @back_end.setter
    def back_end(self, back_end):
        """Sets the back_end of this IpamsvcASM.


        :param back_end: The back_end of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._back_end = back_end

    @property
    def back_start(self):
        """Gets the back_start of this IpamsvcASM.  # noqa: E501


        :return: The back_start of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._back_start

    @back_start.setter
    def back_start(self, back_start):
        """Sets the back_start of this IpamsvcASM.


        :param back_start: The back_start of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._back_start = back_start

    @property
    def both_end(self):
        """Gets the both_end of this IpamsvcASM.  # noqa: E501


        :return: The both_end of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._both_end

    @both_end.setter
    def both_end(self, both_end):
        """Sets the both_end of this IpamsvcASM.


        :param both_end: The both_end of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._both_end = both_end

    @property
    def both_start(self):
        """Gets the both_start of this IpamsvcASM.  # noqa: E501


        :return: The both_start of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._both_start

    @both_start.setter
    def both_start(self, both_start):
        """Sets the both_start of this IpamsvcASM.


        :param both_start: The both_start of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._both_start = both_start

    @property
    def front_end(self):
        """Gets the front_end of this IpamsvcASM.  # noqa: E501


        :return: The front_end of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._front_end

    @front_end.setter
    def front_end(self, front_end):
        """Sets the front_end of this IpamsvcASM.


        :param front_end: The front_end of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._front_end = front_end

    @property
    def front_start(self):
        """Gets the front_start of this IpamsvcASM.  # noqa: E501


        :return: The front_start of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._front_start

    @front_start.setter
    def front_start(self, front_start):
        """Sets the front_start of this IpamsvcASM.


        :param front_start: The front_start of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._front_start = front_start

    @property
    def growth(self):
        """Gets the growth of this IpamsvcASM.  # noqa: E501


        :return: The growth of this IpamsvcASM.  # noqa: E501
        :rtype: int
        """
        return self._growth

    @growth.setter
    def growth(self, growth):
        """Sets the growth of this IpamsvcASM.


        :param growth: The growth of this IpamsvcASM.  # noqa: E501
        :type: int
        """

        self._growth = growth

    @property
    def id(self):
        """Gets the id of this IpamsvcASM.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcASM.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def lookahead(self):
        """Gets the lookahead of this IpamsvcASM.  # noqa: E501

        RO: either the value from the ASM configuration or -1 if the estimate is that utilization will not exceed the threshold.  # noqa: E501

        :return: The lookahead of this IpamsvcASM.  # noqa: E501
        :rtype: int
        """
        return self._lookahead

    @lookahead.setter
    def lookahead(self, lookahead):
        """Sets the lookahead of this IpamsvcASM.

        RO: either the value from the ASM configuration or -1 if the estimate is that utilization will not exceed the threshold.  # noqa: E501

        :param lookahead: The lookahead of this IpamsvcASM.  # noqa: E501
        :type: int
        """

        self._lookahead = lookahead

    @property
    def range_end(self):
        """Gets the range_end of this IpamsvcASM.  # noqa: E501

        RW: The end IP Address of the range.  # noqa: E501

        :return: The range_end of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this IpamsvcASM.

        RW: The end IP Address of the range.  # noqa: E501

        :param range_end: The range_end of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._range_end = range_end

    @property
    def range_id(self):
        """Gets the range_id of this IpamsvcASM.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The range_id of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._range_id

    @range_id.setter
    def range_id(self, range_id):
        """Sets the range_id of this IpamsvcASM.

        The resource identifier.  # noqa: E501

        :param range_id: The range_id of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._range_id = range_id

    @property
    def range_start(self):
        """Gets the range_start of this IpamsvcASM.  # noqa: E501

        RW: The start IP Address of the range.  # noqa: E501

        :return: The range_start of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this IpamsvcASM.

        RW: The start IP Address of the range.  # noqa: E501

        :param range_start: The range_start of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._range_start = range_start

    @property
    def subnet_address(self):
        """Gets the subnet_address of this IpamsvcASM.  # noqa: E501


        :return: The subnet_address of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._subnet_address

    @subnet_address.setter
    def subnet_address(self, subnet_address):
        """Sets the subnet_address of this IpamsvcASM.


        :param subnet_address: The subnet_address of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._subnet_address = subnet_address

    @property
    def subnet_cidr(self):
        """Gets the subnet_cidr of this IpamsvcASM.  # noqa: E501

        RO: The CIDR of the Subnet object.  # noqa: E501

        :return: The subnet_cidr of this IpamsvcASM.  # noqa: E501
        :rtype: int
        """
        return self._subnet_cidr

    @subnet_cidr.setter
    def subnet_cidr(self, subnet_cidr):
        """Sets the subnet_cidr of this IpamsvcASM.

        RO: The CIDR of the Subnet object.  # noqa: E501

        :param subnet_cidr: The subnet_cidr of this IpamsvcASM.  # noqa: E501
        :type: int
        """

        self._subnet_cidr = subnet_cidr

    @property
    def subnet_direction(self):
        """Gets the subnet_direction of this IpamsvcASM.  # noqa: E501


        :return: The subnet_direction of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._subnet_direction

    @subnet_direction.setter
    def subnet_direction(self, subnet_direction):
        """Sets the subnet_direction of this IpamsvcASM.


        :param subnet_direction: The subnet_direction of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._subnet_direction = subnet_direction

    @property
    def subnet_id(self):
        """Gets the subnet_id of this IpamsvcASM.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The subnet_id of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this IpamsvcASM.

        The resource identifier.  # noqa: E501

        :param subnet_id: The subnet_id of this IpamsvcASM.  # noqa: E501
        :type: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")  # noqa: E501

        self._subnet_id = subnet_id

    @property
    def subnet_range(self):
        """Gets the subnet_range of this IpamsvcASM.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The subnet_range of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._subnet_range

    @subnet_range.setter
    def subnet_range(self, subnet_range):
        """Sets the subnet_range of this IpamsvcASM.

        The resource identifier.  # noqa: E501

        :param subnet_range: The subnet_range of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._subnet_range = subnet_range

    @property
    def subnet_range_end(self):
        """Gets the subnet_range_end of this IpamsvcASM.  # noqa: E501


        :return: The subnet_range_end of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._subnet_range_end

    @subnet_range_end.setter
    def subnet_range_end(self, subnet_range_end):
        """Sets the subnet_range_end of this IpamsvcASM.


        :param subnet_range_end: The subnet_range_end of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._subnet_range_end = subnet_range_end

    @property
    def subnet_range_start(self):
        """Gets the subnet_range_start of this IpamsvcASM.  # noqa: E501


        :return: The subnet_range_start of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._subnet_range_start

    @subnet_range_start.setter
    def subnet_range_start(self, subnet_range_start):
        """Sets the subnet_range_start of this IpamsvcASM.


        :param subnet_range_start: The subnet_range_start of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._subnet_range_start = subnet_range_start

    @property
    def suppress(self):
        """Gets the suppress of this IpamsvcASM.  # noqa: E501


        :return: The suppress of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._suppress

    @suppress.setter
    def suppress(self, suppress):
        """Sets the suppress of this IpamsvcASM.


        :param suppress: The suppress of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._suppress = suppress

    @property
    def suppress_time(self):
        """Gets the suppress_time of this IpamsvcASM.  # noqa: E501


        :return: The suppress_time of this IpamsvcASM.  # noqa: E501
        :rtype: int
        """
        return self._suppress_time

    @suppress_time.setter
    def suppress_time(self, suppress_time):
        """Sets the suppress_time of this IpamsvcASM.


        :param suppress_time: The suppress_time of this IpamsvcASM.  # noqa: E501
        :type: int
        """

        self._suppress_time = suppress_time

    @property
    def threshold_utilization(self):
        """Gets the threshold_utilization of this IpamsvcASM.  # noqa: E501


        :return: The threshold_utilization of this IpamsvcASM.  # noqa: E501
        :rtype: int
        """
        return self._threshold_utilization

    @threshold_utilization.setter
    def threshold_utilization(self, threshold_utilization):
        """Sets the threshold_utilization of this IpamsvcASM.


        :param threshold_utilization: The threshold_utilization of this IpamsvcASM.  # noqa: E501
        :type: int
        """

        self._threshold_utilization = threshold_utilization

    @property
    def update(self):
        """Gets the update of this IpamsvcASM.  # noqa: E501


        :return: The update of this IpamsvcASM.  # noqa: E501
        :rtype: str
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this IpamsvcASM.


        :param update: The update of this IpamsvcASM.  # noqa: E501
        :type: str
        """

        self._update = update

    @property
    def utilization(self):
        """Gets the utilization of this IpamsvcASM.  # noqa: E501


        :return: The utilization of this IpamsvcASM.  # noqa: E501
        :rtype: int
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this IpamsvcASM.


        :param utilization: The utilization of this IpamsvcASM.  # noqa: E501
        :type: int
        """

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcASM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcASM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
