# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcHAGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'hosts': 'list[IpamsvcHAGroupHost]',
        'id': 'str',
        'ip_space': 'str',
        'mode': 'str',
        'name': 'str',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        'comment': 'comment',
        'hosts': 'hosts',
        'id': 'id',
        'ip_space': 'ip_space',
        'mode': 'mode',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, comment=None, hosts=None, id=None, ip_space=None, mode=None, name=None, tags=None):  # noqa: E501
        """IpamsvcHAGroup - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._hosts = None
        self._id = None
        self._ip_space = None
        self._mode = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        self.hosts = hosts
        if id is not None:
            self.id = id
        if ip_space is not None:
            self.ip_space = ip_space
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def comment(self):
        """Gets the comment of this IpamsvcHAGroup.  # noqa: E501

        A comment of the HA Group object.  # noqa: E501

        :return: The comment of this IpamsvcHAGroup.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcHAGroup.

        A comment of the HA Group object.  # noqa: E501

        :param comment: The comment of this IpamsvcHAGroup.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def hosts(self):
        """Gets the hosts of this IpamsvcHAGroup.  # noqa: E501

        List of Hosts.  # noqa: E501

        :return: The hosts of this IpamsvcHAGroup.  # noqa: E501
        :rtype: list[IpamsvcHAGroupHost]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this IpamsvcHAGroup.

        List of Hosts.  # noqa: E501

        :param hosts: The hosts of this IpamsvcHAGroup.  # noqa: E501
        :type: list[IpamsvcHAGroupHost]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")  # noqa: E501

        self._hosts = hosts

    @property
    def id(self):
        """Gets the id of this IpamsvcHAGroup.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcHAGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcHAGroup.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcHAGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_space(self):
        """Gets the ip_space of this IpamsvcHAGroup.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The ip_space of this IpamsvcHAGroup.  # noqa: E501
        :rtype: str
        """
        return self._ip_space

    @ip_space.setter
    def ip_space(self, ip_space):
        """Sets the ip_space of this IpamsvcHAGroup.

        The resource identifier.  # noqa: E501

        :param ip_space: The ip_space of this IpamsvcHAGroup.  # noqa: E501
        :type: str
        """

        self._ip_space = ip_space

    @property
    def mode(self):
        """Gets the mode of this IpamsvcHAGroup.  # noqa: E501


        :return: The mode of this IpamsvcHAGroup.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this IpamsvcHAGroup.


        :param mode: The mode of this IpamsvcHAGroup.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this IpamsvcHAGroup.  # noqa: E501

        The name of the HA Group object.  # noqa: E501

        :return: The name of this IpamsvcHAGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcHAGroup.

        The name of the HA Group object.  # noqa: E501

        :param name: The name of this IpamsvcHAGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this IpamsvcHAGroup.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this IpamsvcHAGroup.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcHAGroup.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this IpamsvcHAGroup.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcHAGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcHAGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
