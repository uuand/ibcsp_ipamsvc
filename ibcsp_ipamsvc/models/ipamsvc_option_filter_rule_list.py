# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcOptionFilterRuleList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match': 'str',
        'rules': 'list[IpamsvcOptionFilterRule]'
    }

    attribute_map = {
        'match': 'match',
        'rules': 'rules'
    }

    def __init__(self, match=None, rules=None):  # noqa: E501
        """IpamsvcOptionFilterRuleList - a model defined in Swagger"""  # noqa: E501

        self._match = None
        self._rules = None
        self.discriminator = None

        if match is not None:
            self.match = match
        if rules is not None:
            self.rules = rules

    @property
    def match(self):
        """Gets the match of this IpamsvcOptionFilterRuleList.  # noqa: E501

        Indicates if this list should match if any or all rules match.  # noqa: E501

        :return: The match of this IpamsvcOptionFilterRuleList.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this IpamsvcOptionFilterRuleList.

        Indicates if this list should match if any or all rules match.  # noqa: E501

        :param match: The match of this IpamsvcOptionFilterRuleList.  # noqa: E501
        :type: str
        """

        self._match = match

    @property
    def rules(self):
        """Gets the rules of this IpamsvcOptionFilterRuleList.  # noqa: E501

        list of child rules.  # noqa: E501

        :return: The rules of this IpamsvcOptionFilterRuleList.  # noqa: E501
        :rtype: list[IpamsvcOptionFilterRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this IpamsvcOptionFilterRuleList.

        list of child rules.  # noqa: E501

        :param rules: The rules of this IpamsvcOptionFilterRuleList.  # noqa: E501
        :type: list[IpamsvcOptionFilterRule]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcOptionFilterRuleList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcOptionFilterRuleList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
