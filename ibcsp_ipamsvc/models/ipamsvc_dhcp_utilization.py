# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcDHCPUtilization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dhcp_free': 'str',
        'dhcp_total': 'str',
        'dhcp_used': 'str',
        'dhcp_utilization': 'int'
    }

    attribute_map = {
        'dhcp_free': 'dhcp_free',
        'dhcp_total': 'dhcp_total',
        'dhcp_used': 'dhcp_used',
        'dhcp_utilization': 'dhcp_utilization'
    }

    def __init__(self, dhcp_free=None, dhcp_total=None, dhcp_used=None, dhcp_utilization=None):  # noqa: E501
        """IpamsvcDHCPUtilization - a model defined in Swagger"""  # noqa: E501

        self._dhcp_free = None
        self._dhcp_total = None
        self._dhcp_used = None
        self._dhcp_utilization = None
        self.discriminator = None

        if dhcp_free is not None:
            self.dhcp_free = dhcp_free
        if dhcp_total is not None:
            self.dhcp_total = dhcp_total
        if dhcp_used is not None:
            self.dhcp_used = dhcp_used
        if dhcp_utilization is not None:
            self.dhcp_utilization = dhcp_utilization

    @property
    def dhcp_free(self):
        """Gets the dhcp_free of this IpamsvcDHCPUtilization.  # noqa: E501


        :return: The dhcp_free of this IpamsvcDHCPUtilization.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_free

    @dhcp_free.setter
    def dhcp_free(self, dhcp_free):
        """Sets the dhcp_free of this IpamsvcDHCPUtilization.


        :param dhcp_free: The dhcp_free of this IpamsvcDHCPUtilization.  # noqa: E501
        :type: str
        """

        self._dhcp_free = dhcp_free

    @property
    def dhcp_total(self):
        """Gets the dhcp_total of this IpamsvcDHCPUtilization.  # noqa: E501


        :return: The dhcp_total of this IpamsvcDHCPUtilization.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_total

    @dhcp_total.setter
    def dhcp_total(self, dhcp_total):
        """Sets the dhcp_total of this IpamsvcDHCPUtilization.


        :param dhcp_total: The dhcp_total of this IpamsvcDHCPUtilization.  # noqa: E501
        :type: str
        """

        self._dhcp_total = dhcp_total

    @property
    def dhcp_used(self):
        """Gets the dhcp_used of this IpamsvcDHCPUtilization.  # noqa: E501


        :return: The dhcp_used of this IpamsvcDHCPUtilization.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_used

    @dhcp_used.setter
    def dhcp_used(self, dhcp_used):
        """Sets the dhcp_used of this IpamsvcDHCPUtilization.


        :param dhcp_used: The dhcp_used of this IpamsvcDHCPUtilization.  # noqa: E501
        :type: str
        """

        self._dhcp_used = dhcp_used

    @property
    def dhcp_utilization(self):
        """Gets the dhcp_utilization of this IpamsvcDHCPUtilization.  # noqa: E501

        RO field: dhcp_used/dhcp_total rounded to the nearest integer and constrained to the interval [0, 100] (0 representing 0% and 100 representing 100% utilization).  # noqa: E501

        :return: The dhcp_utilization of this IpamsvcDHCPUtilization.  # noqa: E501
        :rtype: int
        """
        return self._dhcp_utilization

    @dhcp_utilization.setter
    def dhcp_utilization(self, dhcp_utilization):
        """Sets the dhcp_utilization of this IpamsvcDHCPUtilization.

        RO field: dhcp_used/dhcp_total rounded to the nearest integer and constrained to the interval [0, 100] (0 representing 0% and 100 representing 100% utilization).  # noqa: E501

        :param dhcp_utilization: The dhcp_utilization of this IpamsvcDHCPUtilization.  # noqa: E501
        :type: int
        """

        self._dhcp_utilization = dhcp_utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcDHCPUtilization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcDHCPUtilization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
