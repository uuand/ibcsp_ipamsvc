# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcHostnameRewriteBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname_rewrite_char': 'str',
        'hostname_rewrite_enabled': 'bool',
        'hostname_rewrite_regex': 'str'
    }

    attribute_map = {
        'hostname_rewrite_char': 'hostname_rewrite_char',
        'hostname_rewrite_enabled': 'hostname_rewrite_enabled',
        'hostname_rewrite_regex': 'hostname_rewrite_regex'
    }

    def __init__(self, hostname_rewrite_char=None, hostname_rewrite_enabled=None, hostname_rewrite_regex=None):  # noqa: E501
        """IpamsvcHostnameRewriteBlock - a model defined in Swagger"""  # noqa: E501

        self._hostname_rewrite_char = None
        self._hostname_rewrite_enabled = None
        self._hostname_rewrite_regex = None
        self.discriminator = None

        if hostname_rewrite_char is not None:
            self.hostname_rewrite_char = hostname_rewrite_char
        if hostname_rewrite_enabled is not None:
            self.hostname_rewrite_enabled = hostname_rewrite_enabled
        if hostname_rewrite_regex is not None:
            self.hostname_rewrite_regex = hostname_rewrite_regex

    @property
    def hostname_rewrite_char(self):
        """Gets the hostname_rewrite_char of this IpamsvcHostnameRewriteBlock.  # noqa: E501

        Optional. Field config for hostname_rewrite_char field.  # noqa: E501

        :return: The hostname_rewrite_char of this IpamsvcHostnameRewriteBlock.  # noqa: E501
        :rtype: str
        """
        return self._hostname_rewrite_char

    @hostname_rewrite_char.setter
    def hostname_rewrite_char(self, hostname_rewrite_char):
        """Sets the hostname_rewrite_char of this IpamsvcHostnameRewriteBlock.

        Optional. Field config for hostname_rewrite_char field.  # noqa: E501

        :param hostname_rewrite_char: The hostname_rewrite_char of this IpamsvcHostnameRewriteBlock.  # noqa: E501
        :type: str
        """

        self._hostname_rewrite_char = hostname_rewrite_char

    @property
    def hostname_rewrite_enabled(self):
        """Gets the hostname_rewrite_enabled of this IpamsvcHostnameRewriteBlock.  # noqa: E501

        Optional. Field config for hostname_rewrite_enabled field.  # noqa: E501

        :return: The hostname_rewrite_enabled of this IpamsvcHostnameRewriteBlock.  # noqa: E501
        :rtype: bool
        """
        return self._hostname_rewrite_enabled

    @hostname_rewrite_enabled.setter
    def hostname_rewrite_enabled(self, hostname_rewrite_enabled):
        """Sets the hostname_rewrite_enabled of this IpamsvcHostnameRewriteBlock.

        Optional. Field config for hostname_rewrite_enabled field.  # noqa: E501

        :param hostname_rewrite_enabled: The hostname_rewrite_enabled of this IpamsvcHostnameRewriteBlock.  # noqa: E501
        :type: bool
        """

        self._hostname_rewrite_enabled = hostname_rewrite_enabled

    @property
    def hostname_rewrite_regex(self):
        """Gets the hostname_rewrite_regex of this IpamsvcHostnameRewriteBlock.  # noqa: E501

        Optional. Field config for hostname_rewrite_regex field.  # noqa: E501

        :return: The hostname_rewrite_regex of this IpamsvcHostnameRewriteBlock.  # noqa: E501
        :rtype: str
        """
        return self._hostname_rewrite_regex

    @hostname_rewrite_regex.setter
    def hostname_rewrite_regex(self, hostname_rewrite_regex):
        """Sets the hostname_rewrite_regex of this IpamsvcHostnameRewriteBlock.

        Optional. Field config for hostname_rewrite_regex field.  # noqa: E501

        :param hostname_rewrite_regex: The hostname_rewrite_regex of this IpamsvcHostnameRewriteBlock.  # noqa: E501
        :type: str
        """

        self._hostname_rewrite_regex = hostname_rewrite_regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcHostnameRewriteBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcHostnameRewriteBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
