# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcFixedAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'comment': 'str',
        'dhcp_options': 'list[IpamsvcOptionItem]',
        'id': 'str',
        'inheritance_assigned_hosts': 'list[InheritanceAssignedHost]',
        'inheritance_parent': 'str',
        'inheritance_sources': 'IpamsvcDHCPOptionsInheritance',
        'ip_space': 'str',
        'match_type': 'str',
        'match_value': 'str',
        'name': 'str',
        'parent': 'str',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        'address': 'address',
        'comment': 'comment',
        'dhcp_options': 'dhcp_options',
        'id': 'id',
        'inheritance_assigned_hosts': 'inheritance_assigned_hosts',
        'inheritance_parent': 'inheritance_parent',
        'inheritance_sources': 'inheritance_sources',
        'ip_space': 'ip_space',
        'match_type': 'match_type',
        'match_value': 'match_value',
        'name': 'name',
        'parent': 'parent',
        'tags': 'tags'
    }

    def __init__(self, address=None, comment=None, dhcp_options=None, id=None, inheritance_assigned_hosts=None, inheritance_parent=None, inheritance_sources=None, ip_space=None, match_type=None, match_value=None, name=None, parent=None, tags=None):  # noqa: E501
        """IpamsvcFixedAddress - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._comment = None
        self._dhcp_options = None
        self._id = None
        self._inheritance_assigned_hosts = None
        self._inheritance_parent = None
        self._inheritance_sources = None
        self._ip_space = None
        self._match_type = None
        self._match_value = None
        self._name = None
        self._parent = None
        self._tags = None
        self.discriminator = None

        self.address = address
        if comment is not None:
            self.comment = comment
        if dhcp_options is not None:
            self.dhcp_options = dhcp_options
        if id is not None:
            self.id = id
        if inheritance_assigned_hosts is not None:
            self.inheritance_assigned_hosts = inheritance_assigned_hosts
        if inheritance_parent is not None:
            self.inheritance_parent = inheritance_parent
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        if ip_space is not None:
            self.ip_space = ip_space
        self.match_type = match_type
        self.match_value = match_value
        if name is not None:
            self.name = name
        if parent is not None:
            self.parent = parent
        if tags is not None:
            self.tags = tags

    @property
    def address(self):
        """Gets the address of this IpamsvcFixedAddress.  # noqa: E501


        :return: The address of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IpamsvcFixedAddress.


        :param address: The address of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def comment(self):
        """Gets the comment of this IpamsvcFixedAddress.  # noqa: E501

        A comment of the Fixed Address object.  # noqa: E501

        :return: The comment of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcFixedAddress.

        A comment of the Fixed Address object.  # noqa: E501

        :param comment: The comment of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this IpamsvcFixedAddress.  # noqa: E501

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :return: The dhcp_options of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: list[IpamsvcOptionItem]
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this IpamsvcFixedAddress.

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :param dhcp_options: The dhcp_options of this IpamsvcFixedAddress.  # noqa: E501
        :type: list[IpamsvcOptionItem]
        """

        self._dhcp_options = dhcp_options

    @property
    def id(self):
        """Gets the id of this IpamsvcFixedAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcFixedAddress.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_assigned_hosts(self):
        """Gets the inheritance_assigned_hosts of this IpamsvcFixedAddress.  # noqa: E501

        Read-only. The list of the inheritance assigned hosts of the object.  # noqa: E501

        :return: The inheritance_assigned_hosts of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: list[InheritanceAssignedHost]
        """
        return self._inheritance_assigned_hosts

    @inheritance_assigned_hosts.setter
    def inheritance_assigned_hosts(self, inheritance_assigned_hosts):
        """Sets the inheritance_assigned_hosts of this IpamsvcFixedAddress.

        Read-only. The list of the inheritance assigned hosts of the object.  # noqa: E501

        :param inheritance_assigned_hosts: The inheritance_assigned_hosts of this IpamsvcFixedAddress.  # noqa: E501
        :type: list[InheritanceAssignedHost]
        """

        self._inheritance_assigned_hosts = inheritance_assigned_hosts

    @property
    def inheritance_parent(self):
        """Gets the inheritance_parent of this IpamsvcFixedAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The inheritance_parent of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._inheritance_parent

    @inheritance_parent.setter
    def inheritance_parent(self, inheritance_parent):
        """Sets the inheritance_parent of this IpamsvcFixedAddress.

        The resource identifier.  # noqa: E501

        :param inheritance_parent: The inheritance_parent of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """

        self._inheritance_parent = inheritance_parent

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this IpamsvcFixedAddress.  # noqa: E501

        Optional. Inheritance configuration.  # noqa: E501

        :return: The inheritance_sources of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: IpamsvcDHCPOptionsInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this IpamsvcFixedAddress.

        Optional. Inheritance configuration.  # noqa: E501

        :param inheritance_sources: The inheritance_sources of this IpamsvcFixedAddress.  # noqa: E501
        :type: IpamsvcDHCPOptionsInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def ip_space(self):
        """Gets the ip_space of this IpamsvcFixedAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The ip_space of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._ip_space

    @ip_space.setter
    def ip_space(self, ip_space):
        """Sets the ip_space of this IpamsvcFixedAddress.

        The resource identifier.  # noqa: E501

        :param ip_space: The ip_space of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """

        self._ip_space = ip_space

    @property
    def match_type(self):
        """Gets the match_type of this IpamsvcFixedAddress.  # noqa: E501


        :return: The match_type of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this IpamsvcFixedAddress.


        :param match_type: The match_type of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """
        if match_type is None:
            raise ValueError("Invalid value for `match_type`, must not be `None`")  # noqa: E501

        self._match_type = match_type

    @property
    def match_value(self):
        """Gets the match_value of this IpamsvcFixedAddress.  # noqa: E501

        Value to match.  # noqa: E501

        :return: The match_value of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._match_value

    @match_value.setter
    def match_value(self, match_value):
        """Sets the match_value of this IpamsvcFixedAddress.

        Value to match.  # noqa: E501

        :param match_value: The match_value of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """
        if match_value is None:
            raise ValueError("Invalid value for `match_value`, must not be `None`")  # noqa: E501

        self._match_value = match_value

    @property
    def name(self):
        """Gets the name of this IpamsvcFixedAddress.  # noqa: E501

        The name of Fixed Address object.  # noqa: E501

        :return: The name of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcFixedAddress.

        The name of Fixed Address object.  # noqa: E501

        :param name: The name of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this IpamsvcFixedAddress.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The parent of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this IpamsvcFixedAddress.

        The resource identifier.  # noqa: E501

        :param parent: The parent of this IpamsvcFixedAddress.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def tags(self):
        """Gets the tags of this IpamsvcFixedAddress.  # noqa: E501


        :return: The tags of this IpamsvcFixedAddress.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcFixedAddress.


        :param tags: The tags of this IpamsvcFixedAddress.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcFixedAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcFixedAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
