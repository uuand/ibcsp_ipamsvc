# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcOptionCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'array': 'bool',
        'code': 'int',
        'comment': 'str',
        'id': 'str',
        'name': 'str',
        'option_space': 'str',
        'source': 'str',
        'type': 'str'
    }

    attribute_map = {
        'array': 'array',
        'code': 'code',
        'comment': 'comment',
        'id': 'id',
        'name': 'name',
        'option_space': 'option_space',
        'source': 'source',
        'type': 'type'
    }

    def __init__(self, array=None, code=None, comment=None, id=None, name=None, option_space=None, source=None, type=None):  # noqa: E501
        """IpamsvcOptionCode - a model defined in Swagger"""  # noqa: E501

        self._array = None
        self._code = None
        self._comment = None
        self._id = None
        self._name = None
        self._option_space = None
        self._source = None
        self._type = None
        self.discriminator = None

        if array is not None:
            self.array = array
        self.code = code
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.option_space = option_space
        if source is not None:
            self.source = source
        self.type = type

    @property
    def array(self):
        """Gets the array of this IpamsvcOptionCode.  # noqa: E501

        True if the option value is an array of the type.  # noqa: E501

        :return: The array of this IpamsvcOptionCode.  # noqa: E501
        :rtype: bool
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this IpamsvcOptionCode.

        True if the option value is an array of the type.  # noqa: E501

        :param array: The array of this IpamsvcOptionCode.  # noqa: E501
        :type: bool
        """

        self._array = array

    @property
    def code(self):
        """Gets the code of this IpamsvcOptionCode.  # noqa: E501

        Option Code.  # noqa: E501

        :return: The code of this IpamsvcOptionCode.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this IpamsvcOptionCode.

        Option Code.  # noqa: E501

        :param code: The code of this IpamsvcOptionCode.  # noqa: E501
        :type: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def comment(self):
        """Gets the comment of this IpamsvcOptionCode.  # noqa: E501

        A comment of Option Code object.  # noqa: E501

        :return: The comment of this IpamsvcOptionCode.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcOptionCode.

        A comment of Option Code object.  # noqa: E501

        :param comment: The comment of this IpamsvcOptionCode.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this IpamsvcOptionCode.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcOptionCode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcOptionCode.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcOptionCode.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IpamsvcOptionCode.  # noqa: E501

        The name of Option Code object.  # noqa: E501

        :return: The name of this IpamsvcOptionCode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcOptionCode.

        The name of Option Code object.  # noqa: E501

        :param name: The name of this IpamsvcOptionCode.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def option_space(self):
        """Gets the option_space of this IpamsvcOptionCode.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The option_space of this IpamsvcOptionCode.  # noqa: E501
        :rtype: str
        """
        return self._option_space

    @option_space.setter
    def option_space(self, option_space):
        """Sets the option_space of this IpamsvcOptionCode.

        The resource identifier.  # noqa: E501

        :param option_space: The option_space of this IpamsvcOptionCode.  # noqa: E501
        :type: str
        """
        if option_space is None:
            raise ValueError("Invalid value for `option_space`, must not be `None`")  # noqa: E501

        self._option_space = option_space

    @property
    def source(self):
        """Gets the source of this IpamsvcOptionCode.  # noqa: E501

        RO field. Source.  It can have one of the following values:    dhcp_server    reserved    blox_one_ddi    customer  Defaults to customer.  # noqa: E501

        :return: The source of this IpamsvcOptionCode.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this IpamsvcOptionCode.

        RO field. Source.  It can have one of the following values:    dhcp_server    reserved    blox_one_ddi    customer  Defaults to customer.  # noqa: E501

        :param source: The source of this IpamsvcOptionCode.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this IpamsvcOptionCode.  # noqa: E501

        Option Type. It can have one of the following values: [address4, address6, boolean, empty, fqdn, int8, int16, int32, text, uint8, uint16, uint32].  # noqa: E501

        :return: The type of this IpamsvcOptionCode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IpamsvcOptionCode.

        Option Type. It can have one of the following values: [address4, address6, boolean, empty, fqdn, int8, int16, int32, text, uint8, uint16, uint32].  # noqa: E501

        :param type: The type of this IpamsvcOptionCode.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcOptionCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcOptionCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
