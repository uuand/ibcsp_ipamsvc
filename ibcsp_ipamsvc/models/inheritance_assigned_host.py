# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InheritanceAssignedHost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'host': 'str',
        'ophid': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'host': 'host',
        'ophid': 'ophid'
    }

    def __init__(self, display_name=None, host=None, ophid=None):  # noqa: E501
        """InheritanceAssignedHost - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._host = None
        self._ophid = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if host is not None:
            self.host = host
        if ophid is not None:
            self.ophid = ophid

    @property
    def display_name(self):
        """Gets the display_name of this InheritanceAssignedHost.  # noqa: E501

        Human-readable display name for the host referred to by ophid.  # noqa: E501

        :return: The display_name of this InheritanceAssignedHost.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InheritanceAssignedHost.

        Human-readable display name for the host referred to by ophid.  # noqa: E501

        :param display_name: The display_name of this InheritanceAssignedHost.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def host(self):
        """Gets the host of this InheritanceAssignedHost.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The host of this InheritanceAssignedHost.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this InheritanceAssignedHost.

        The resource identifier.  # noqa: E501

        :param host: The host of this InheritanceAssignedHost.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def ophid(self):
        """Gets the ophid of this InheritanceAssignedHost.  # noqa: E501

        On-Prem Host ID.  # noqa: E501

        :return: The ophid of this InheritanceAssignedHost.  # noqa: E501
        :rtype: str
        """
        return self._ophid

    @ophid.setter
    def ophid(self, ophid):
        """Sets the ophid of this InheritanceAssignedHost.

        On-Prem Host ID.  # noqa: E501

        :param ophid: The ophid of this InheritanceAssignedHost.  # noqa: E501
        :type: str
        """

        self._ophid = ophid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InheritanceAssignedHost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InheritanceAssignedHost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
