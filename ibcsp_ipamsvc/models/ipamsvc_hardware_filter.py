# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.     # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpamsvcHardwareFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[str]',
        'comment': 'str',
        'dhcp_options': 'list[IpamsvcOptionItem]',
        'id': 'str',
        'name': 'str',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        'addresses': 'addresses',
        'comment': 'comment',
        'dhcp_options': 'dhcp_options',
        'id': 'id',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, addresses=None, comment=None, dhcp_options=None, id=None, name=None, tags=None):  # noqa: E501
        """IpamsvcHardwareFilter - a model defined in Swagger"""  # noqa: E501

        self._addresses = None
        self._comment = None
        self._dhcp_options = None
        self._id = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if addresses is not None:
            self.addresses = addresses
        if comment is not None:
            self.comment = comment
        if dhcp_options is not None:
            self.dhcp_options = dhcp_options
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def addresses(self):
        """Gets the addresses of this IpamsvcHardwareFilter.  # noqa: E501

        List of addresses to match.  # noqa: E501

        :return: The addresses of this IpamsvcHardwareFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this IpamsvcHardwareFilter.

        List of addresses to match.  # noqa: E501

        :param addresses: The addresses of this IpamsvcHardwareFilter.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def comment(self):
        """Gets the comment of this IpamsvcHardwareFilter.  # noqa: E501

        A comment of hardware filter object.  # noqa: E501

        :return: The comment of this IpamsvcHardwareFilter.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IpamsvcHardwareFilter.

        A comment of hardware filter object.  # noqa: E501

        :param comment: The comment of this IpamsvcHardwareFilter.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this IpamsvcHardwareFilter.  # noqa: E501

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :return: The dhcp_options of this IpamsvcHardwareFilter.  # noqa: E501
        :rtype: list[IpamsvcOptionItem]
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this IpamsvcHardwareFilter.

        A list of DHCP options. May be either a specific option or a group of options.  # noqa: E501

        :param dhcp_options: The dhcp_options of this IpamsvcHardwareFilter.  # noqa: E501
        :type: list[IpamsvcOptionItem]
        """

        self._dhcp_options = dhcp_options

    @property
    def id(self):
        """Gets the id of this IpamsvcHardwareFilter.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this IpamsvcHardwareFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpamsvcHardwareFilter.

        The resource identifier.  # noqa: E501

        :param id: The id of this IpamsvcHardwareFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IpamsvcHardwareFilter.  # noqa: E501

        The name of hardware filter object.  # noqa: E501

        :return: The name of this IpamsvcHardwareFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpamsvcHardwareFilter.

        The name of hardware filter object.  # noqa: E501

        :param name: The name of this IpamsvcHardwareFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this IpamsvcHardwareFilter.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this IpamsvcHardwareFilter.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IpamsvcHardwareFilter.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this IpamsvcHardwareFilter.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpamsvcHardwareFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpamsvcHardwareFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
